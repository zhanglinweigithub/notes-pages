import{_ as s,o as n,c as a,a as i}from"./app-Vg0IViah.js";const e={},l=i(`<h1 id="计算机基础" tabindex="-1"><a class="header-anchor" href="#计算机基础"><span>计算机基础</span></a></h1><h2 id="一、计算机硬件组成" tabindex="-1"><a class="header-anchor" href="#一、计算机硬件组成"><span>一、计算机硬件组成</span></a></h2><p>计算机的基本硬件系统由 <strong>运算器、控制器、存储器、输入设备</strong> 和 <strong>输出设备</strong> 5大部件组成。</p><h3 id="_1、运算器、控制器" tabindex="-1"><a class="header-anchor" href="#_1、运算器、控制器"><span>1、运算器、控制器</span></a></h3><p>运算器、控制器等部件被集成在一起统称为中央处理单元（Central ProcessingUnit，CPU）。</p><p>CPU是硬件系统的核心，用于数据的加工处理， 能完成各种算术、逻辑运算及控制功能</p><h3 id="_2、存储器" tabindex="-1"><a class="header-anchor" href="#_2、存储器"><span>2、存储器</span></a></h3><p>存储器是计算机系统中的记忆设备，分为<strong>内部存储器</strong>和<strong>外部存储器</strong>。</p><p><strong>内部存储器（内存）：</strong> 速度高、容量小，一般用于临时存放程序、数据及中间结果。</p><p><strong>外部存储器（硬盘）：</strong> 容量大、速度慢，可以长期保存程序和数据。</p><h3 id="_3、输入设备、输出设备" tabindex="-1"><a class="header-anchor" href="#_3、输入设备、输出设备"><span>3、输入设备、输出设备</span></a></h3><p>输入设备和输出设备合称为 <strong>外部设备（简称外设）</strong> 。</p><p><strong>输入设备：</strong> 用于输入原始数据及各种命令。</p><p><strong>输出设备：</strong> 则用于输出计算机运行的结果。</p><h2 id="二、cpu" tabindex="-1"><a class="header-anchor" href="#二、cpu"><span>二、CPU</span></a></h2><h3 id="_1、cpu功能" tabindex="-1"><a class="header-anchor" href="#_1、cpu功能"><span>1、CPU功能</span></a></h3><ol><li><strong>程序控制：</strong> CPU通过执行指令来控制程序的执行顺序，这是CPU的重要功能。</li><li><strong>操作控制：</strong> 一条指令功能的实现需要若干操作信号配合来完成，CPU产生每条指令的操作信号并将操作信号送往对应的部件，控制相应的部件按指令的功能要求进行操作。</li><li><strong>时间控制：</strong> CPU对各种操作进行时间上的控制，即指令执行过程中操作信号的出现时间、持续时间及出现的时间顺序都需要进行严格控制。</li><li><strong>数据处理：</strong> CPU通过对数据进行算术运算及逻辑运算等方式进行加工处理，数据加工处理的结果被人们所利用。所以，对数据的加工处理也是CPU最根本的任务。</li></ol><p>CPU还需要对 <strong>系统内部和外部的中断或异常做出响应</strong> ，进行相应的处理。</p><h3 id="_2、cpu组成" tabindex="-1"><a class="header-anchor" href="#_2、cpu组成"><span>2、CPU组成</span></a></h3><p>CPU主要由 <strong>运算器、控制器、寄存器组</strong> 和 <strong>内部总线</strong> 等部件组成</p><p><strong>运算器：</strong> 执行所有的算术运算，如加减乘除等。执行所有的逻辑运算并进行逻辑测试，如与、或、非、比较等。</p><ul><li><strong>算术逻辑单元ALU：</strong> 实现对数据的算术和逻辑运算</li><li><strong>累加寄存器AC：</strong> 运算结果或源操作数的存放区</li><li><strong>数据缓冲寄存器DR：</strong> 暂时存放内存的指令或数据</li><li><strong>状态条件寄存器PSW：</strong> 保存指令运行结果的条件码内容，如溢出标志等组成。</li></ul><p><strong>控制器：</strong> 控制整个CPU的工作，最为重要。</p><ul><li><strong>指令寄存器IR：</strong> 暂存CPU执行指令</li><li><strong>程序计数器PC：</strong> 存放指令执行地址</li><li><strong>地址寄存器AR：</strong> 保存当前CPU所访问的内存地址</li><li><strong>指令译码器ID：</strong> 分析指令操作码等组成</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>CPU依据指令周期的不同阶段来区分二进制的指令和数据，因为在指令周期的不同阶段，指令会命令CPU分别去取指令或者数据。</p></div><h2 id="三、校验码" tabindex="-1"><a class="header-anchor" href="#三、校验码"><span>三、校验码</span></a></h2><p><strong>作用：</strong> 检测数据完整性</p><h3 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念"><span>1、概念</span></a></h3><p><strong>码距：</strong> 就单个编码<code>A：00</code>而言，其码距为1，因为其只需要改变一位就变成另一个编码。在两个编码中，从A码到B码转换所需要改变的位数称为码距，如<code>A： 00</code>要转换为<code>B：11</code>，码距为2。一般来说， <strong>码距越大，越利于纠错和检错</strong></p><h3 id="_2、奇偶校验码" tabindex="-1"><a class="header-anchor" href="#_2、奇偶校验码"><span>2、奇偶校验码</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>只能检错，不能纠错</p></div><ul><li>无论数据位多少位，校验位只有一位（1bit）</li><li>数据位和校验位一共所含的1个数为奇数，称为奇校验</li><li>数据位和校验位一共所含的1个数为偶数，称为偶校验</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>原始码		  奇校验		偶校验</span></span>
<span class="line"><span>1011000		10110000	10110001</span></span>
<span class="line"><span>1010000		10100001	10100000</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>奇校验：奇数个1；偶校验：偶数个1</p><p>校验位可以是0 or 1，可以在前，也可在后</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"># 校验位在后, 可以是0或1, xxx原始码流</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">xxxxxxxxxx0</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">xxxxxxxxxx1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"># 校验位在前, 可以是0或1, xxx原始码流</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">0xxxxxxxxxx</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">1xxxxxxxxxx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误检测能力：</strong> 只能检测出奇数个错误。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>奇校验 正确码流 11000001 共奇数个1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>错1位： 11000011	变成了偶数个1, 可以检测出错误</span></span>
<span class="line"><span>错2位： 11000010	变成了奇数个1, 不可以检测出错误</span></span>
<span class="line"><span>错3位： 11001010	变成了偶数个1, 可以检测出错误</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>偶校验 正确码流 01000001 共偶数个1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>错1位： 01000011	变成了奇数个1, 可以检测出错误</span></span>
<span class="line"><span>错2位： 01000010	变成了偶数个1, 不可以检测出错误</span></span>
<span class="line"><span>错3位： 01001010	变成了奇数个1, 可以检测出错误</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>奇校验的重要特征是产生不了全0代码</p></blockquote><h2 id="四、crc校验码" tabindex="-1"><a class="header-anchor" href="#四、crc校验码"><span>四、CRC校验码</span></a></h2><p>全称：循环冗余校验码</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>只能检错，不能纠错</p></div><p><strong>检错流程：</strong></p><ol><li>使用CRC编码，需要先约定一个生成多项式<code>G（x）</code>。</li><li>生成多项式的最高位和最低位必须是1。假设原始信息有m位，则对应多项式<code>M（x）</code>。</li><li>生成校验码思想就是在原始信息位后追加若干校验位，使得追加的信息能被<code>G（x）</code>整除。</li><li>接收方接收到带校验位的信息，然后用<code>G（x）</code>整除。余数为0，则没有错误；反之则发生错误。</li></ol><p><strong>计算过程：</strong></p><p>例：假设原始信息串为10110，CRC的生成多项式为<code>G（x）＝x＾4＋x＋1</code>，求CRC校验码。</p><ol><li>在原始信息位后面添0，假设生成多项式的阶为r，则在原始信息位后添加r个0，本题中，<code>G（x）</code>阶为4，则在原始信息串后加4个0，得到的新串为101100000，作为被除数。</li><li>由多项式得到除数，多项中x的幂指数存在的位置记为1，不存在的位置记为0。本题中，x的幂指数为0、1、4的变量都存在，而幂指数为2、3的不存在，因此得到串10011**。**</li><li>生成CRC校验码，将前两步得出的被除数和除数进行模2除法运算(即不进位也不借位的除法运算)。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>得到除数：</p><p>本题中，x的幂指数最大为4，且 <code>G（x）＝x＾4＋x＋1</code>可看为 <code>G（x）＝x＾4＋x＾1＋x＾0</code>，所以</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>1 0 0 1 1 存在记为1, 不存在记为0</span></span>
<span class="line"><span>----------</span></span>
<span class="line"><span>4 3 2 1 0 下标  </span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>相同为0, 不同为1</span></span>
<span class="line"><span>	   /-----------</span></span>
<span class="line"><span>10011 /101100000</span></span>
<span class="line"><span>	-------------</span></span>
<span class="line"><span>		 10100</span></span>
<span class="line"><span>		 10011</span></span>
<span class="line"><span>	-------------</span></span>
<span class="line"><span>		   11100</span></span>
<span class="line"><span>		   10011</span></span>
<span class="line"><span>	-------------</span></span>
<span class="line"><span>			1111</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到余数1111</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>余数不足r，则余数左边用若干个0补齐，这里的r为4</p></div><ol start="4"><li>生成最终发送信息串，将余数添加到原始信息后。上例中，原始信息为10110，添加余数1111后，结果为101101111。发送方将此数据发送给接收方</li><li>接收方进行校验。接收方的CRC校验过程与生成过程类似，接收方接收了带校验和的帧后， 用多项式<code>G（x）</code>来除。余数为0，则表示信息无错；否则要求发送方进行重传。</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：收发信息双方需使用相同的生成多项式</p></div><h2 id="五、练习" tabindex="-1"><a class="header-anchor" href="#五、练习"><span>五、练习</span></a></h2><p>1、CPU执行算术运算或者逻辑运算时，常将源操作数和结果暂存在（)中。</p><p>A：程序计数器（PC）</p><p>B：累加器（AC）</p><p>C：指令寄存器（IR）</p><p>D：地址寄存器（AR)</p><details class="hint-container details"><summary>答案</summary><p>B</p></details><p>2、执行CPU指令时，在一个指令周期的过程中，首先需从内存读取要执行的指令，此时先要将指令的地址即（）的内容送到地址总线上。</p><p>A：指令寄存器（IR）</p><p>B：通用寄存器（GR）</p><p>C：程序计数器（PC）</p><p>D：状态寄存器（PSW)</p><details class="hint-container details"><summary>答案</summary><p>C</p></details><p>3、循环冗余校验码（Cyclic Redundancy Check，CRC）是数据通信领域中最常用的一种差错校验码，该校验方法中，使用多项式除法（模2除法）运算后的余数为校验字段。若数据信息为n位，则将其左移k位后，被长度为k＋1位的生成多项式相除，所得的k位余数即构成k个校验位，构成n＋k 位编码。若数据信息为1100，生成多项式为<code>X^3＋X＋1</code>（即1011），则CRC编码是（）</p><p>A：1100010</p><p>B：1011010</p><p>C：1100011</p><p>D：1011110</p><details class="hint-container details"><summary>答案与解析</summary><p>A</p><p>解析：</p><ol><li>在原始信息位后加k个000，即1100000</li><li>将1100000与生成多项式1011做模2除法，得到余数为010</li><li>将原始信息位与余数连接起来得到：1100010</li></ol></details>`,71),p=[l];function t(r,d){return n(),a("div",null,p)}const o=s(e,[["render",t],["__file","ComputerBase.html.vue"]]),h=JSON.parse('{"path":"/SoftTest/Conventional/ComputerBase.html","title":"计算机基础","lang":"zh-CN","frontmatter":{"order":2,"category":"软考","feed":false,"seo":false},"headers":[{"level":2,"title":"一、计算机硬件组成","slug":"一、计算机硬件组成","link":"#一、计算机硬件组成","children":[{"level":3,"title":"1、运算器、控制器","slug":"_1、运算器、控制器","link":"#_1、运算器、控制器","children":[]},{"level":3,"title":"2、存储器","slug":"_2、存储器","link":"#_2、存储器","children":[]},{"level":3,"title":"3、输入设备、输出设备","slug":"_3、输入设备、输出设备","link":"#_3、输入设备、输出设备","children":[]}]},{"level":2,"title":"二、CPU","slug":"二、cpu","link":"#二、cpu","children":[{"level":3,"title":"1、CPU功能","slug":"_1、cpu功能","link":"#_1、cpu功能","children":[]},{"level":3,"title":"2、CPU组成","slug":"_2、cpu组成","link":"#_2、cpu组成","children":[]}]},{"level":2,"title":"三、校验码","slug":"三、校验码","link":"#三、校验码","children":[{"level":3,"title":"1、概念","slug":"_1、概念","link":"#_1、概念","children":[]},{"level":3,"title":"2、奇偶校验码","slug":"_2、奇偶校验码","link":"#_2、奇偶校验码","children":[]}]},{"level":2,"title":"四、CRC校验码","slug":"四、crc校验码","link":"#四、crc校验码","children":[]},{"level":2,"title":"五、练习","slug":"五、练习","link":"#五、练习","children":[]}],"git":{"createdTime":1710676914000,"updatedTime":1710676914000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":1}]},"readingTime":{"minutes":7.39,"words":2216},"filePathRelative":"SoftTest/Conventional/ComputerBase.md","localizedDate":"2024年3月17日"}');export{o as comp,h as data};
