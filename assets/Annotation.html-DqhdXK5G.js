import{_ as r,r as D,o as p,c as d,g as c,w as n,a as e,f as a,e as s}from"./app-Vg0IViah.js";const t={},k=e(`<h1 id="springboot注解汇总" tabindex="-1"><a class="header-anchor" href="#springboot注解汇总"><span>SpringBoot注解汇总</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注解比较多，建议 <code>CTRL + F</code> 搜索</p></div><h2 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication"><span>@SpringBootApplication</span></a></h2><p><code>@SpringBootApplication</code>注解是一个快捷的配置注解，在被它标注的类中，可以定义一个或多个<code>Bean</code>，并自动触发自动配置<code>Bean</code>和自动扫描组件。此注解相当于<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>的组合。</p><p>在<code>Spring Boot</code>应用程序的主类中，就使用了此注解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SpringBootApplication</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserSystemApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> main</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">args</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        SpringApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">run</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">UserSystemApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, args);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration"><span>@EnableAutoConfiguration</span></a></h2><p>已集成在 <code>@SpringBootApplication</code> 注解中</p><p>开启自动配置功能，让<code>spring boot</code>根据类路径中的<code>jar</code>包依赖对当前项目进行自动配置</p><p><code>@EnableAutoConfiguration</code>是一个组合注解，该注解内部使用<code>@Import</code>注解，引入了配置类<code>AutoConfigurationImportSelector.Class</code>，该类是<code>ImportSelect</code>接口的实现类，它重写了接口中的<code>selectImports()</code>方法，得到一个<code>String</code>类型的数组。该数组是通过底层加载配置文件 <code>META-INF/spring.factories</code>得到的，该配置文件中定义了大量的配置类，<code>Sring Boot</code> 启动的时候会加载所有的<code>selector</code>并执行<code>selectImports()</code>方法，从而完成自动配置。不是所有的类在初始化时都可以自动加载进<code>Spring IOC</code>容器中，要结合<code>@Conditional</code>这个条件注解进行判断，待加载的配置类如果满足所有的<code>@Conditional</code>注解限定的条件，才会进行自动加载</p><p>在<code>src/main/resources</code>的<code>META-INF/spring.factories</code>中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// spring.factories</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">org</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">springframework</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">boot</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">autoconfigure</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">EnableAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">=\\</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">org</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">springframework</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">boot</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">autoconfigure</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">admin</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">SpringApplicationAdminJmxAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,\\</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">org</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">springframework</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">boot</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">autoconfigure</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">aop</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">AopAutoConfiguration</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">若有多个自动配置，用“，”隔开</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springbootconfiguration" tabindex="-1"><a class="header-anchor" href="#springbootconfiguration"><span>@SpringBootConfiguration</span></a></h2><p>这个注解只是用来修饰是 <code>Spring Boot</code> 配置而已，或者可利于 <code>Spring Boot</code> 后续的扩展</p><p><code>@SpringBootConfiguration</code> 标注这个类是一个配置类；</p><p>它只是<code>@Configuration</code>注解的派生注解；</p><p>它与<code>@Configuration</code>注解的功能一致；</p><p>只不过<code>@SpringBootConfiguration</code>是<code>springboot</code>的注解，而<code>@Configuration</code>是<code>spring</code>的注解。</p><h2 id="importresource" tabindex="-1"><a class="header-anchor" href="#importresource"><span>@ImportResource</span></a></h2><p>和<code>@Import</code>类似，区别就是<code>@ImportResource</code>导入的是配置文件</p><p>加载<code>xml</code>配置，一般是放在启动<code>main</code>类上</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// @ImportResource(&quot;classpath*:/spring/*.xml&quot;) 单个</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ImportResource</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">({</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;classpath*:/spring/1.xml&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;classpath*:/spring/2.xml&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}) </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 多个</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SpringBootApplication</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserSystemApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> main</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">args</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        SpringApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">run</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">UserSystemApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, args);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>@Value</span></a></h2><p>三种用法</p><ul><li><code>\${}</code>是去找外部配置的参数，将值赋过来</li><li><code>#{}</code>是<code>SpEL</code>表达式，去寻找对应变量的内容</li><li><code>#{}</code>直接写字符串就是将字符串的值注入进去</li></ul><p>读取 <code>application.properties</code> 或 <code>application.yml</code> 配置文件中的属性，直接使用<code>@Value</code>注入即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> A</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Value</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;\${push.start:0}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)    </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 如果缺失，默认值为0</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Long</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">  id</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 10</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Value</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;\${application.name}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// userApplication</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"># application.yaml</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">application</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&#39;userApplication&#39;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">push</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  start</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configurationproperties" tabindex="-1"><a class="header-anchor" href="#configurationproperties"><span>@ConfigurationProperties</span></a></h2><p>读取配置文件的另一种方式，使用<code>prefix</code>指定配置前缀</p><p>三种使用方式：</p><ol><li><code>@ConfigurationProperties</code> + <code>@Component</code> 在类上使用的场景</li><li><code>@ConfigurationProperties</code> + <code>@EnableConfigurationProperties</code> 在类上使用的场景</li><li><code>@ConfigurationProperties</code> + <code>@Bean</code> 在方法上使用的场景</li></ol>`,32),h=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes dark-plus dark-plus",style:{"background-color":"#1E1E1E","--shiki-dark-bg":"#1E1E1E",color:"#D4D4D4","--shiki-dark":"#D4D4D4"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"Component"),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}}," // 需要放到容器里")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"ConfigurationProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"(prefix="),s("span",{style:{color:"#CE9178","--shiki-dark":"#CE9178"}},'"user"'),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},") "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// 需要前缀")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"Data"),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}}," // 需要set方法")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"public"),s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}}," class"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," UserProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"	")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"	private"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," String"),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}}," name"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"; "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// zhang")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"	private"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," int"),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}}," age"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"; "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// 18")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"    ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),C=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes dark-plus dark-plus",style:{"background-color":"#1E1E1E","--shiki-dark-bg":"#1E1E1E",color:"#D4D4D4","--shiki-dark":"#D4D4D4"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"ConfigurationProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"(prefix="),s("span",{style:{color:"#CE9178","--shiki-dark":"#CE9178"}},'"user"'),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},") "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// 需要前缀")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"Data"),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}}," // 需要set方法")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"public"),s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}}," class"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," UserProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"	")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"	private"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," String"),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}}," name"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"; "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// zhang")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"	private"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," int"),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}}," age"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"; "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// 18")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"    ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"Component")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"EnableConfigurationProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"({"),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}},"UserProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"."),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}},"class"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"})")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"public"),s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}}," class"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," UserAutoConfiguration"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // ...")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),y=s("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[s("pre",{class:"shiki shiki-themes dark-plus dark-plus",style:{"background-color":"#1E1E1E","--shiki-dark-bg":"#1E1E1E",color:"#D4D4D4","--shiki-dark":"#D4D4D4"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"Data"),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}}," // 需要set方法")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"public"),s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}}," class"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," UserProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"	")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"	private"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," String"),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}}," name"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"; "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// zhang")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"	private"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," int"),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}}," age"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"; "),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// 18")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"    ")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"// 准备个@Configuration 配置类")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"Configuration")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"public"),s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}}," class"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," ConfigurationDemo"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}}," {")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"	// 这里将UserProperties 配置类 生成bean对象")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 此时：UserProperties里面的属性将与配置文件yml内容进行绑定")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"    @"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"Bean")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"    @"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}},"ConfigurationProperties"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"(prefix = "),s("span",{style:{color:"#CE9178","--shiki-dark":"#CE9178"}},'"user"'),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#569CD6","--shiki-dark":"#569CD6"}},"    public"),s("span",{style:{color:"#4EC9B0","--shiki-dark":"#4EC9B0"}}," TestConfigDemo"),s("span",{style:{color:"#DCDCAA","--shiki-dark":"#DCDCAA"}}," testConfigDemo"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"(){")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C586C0","--shiki-dark":"#C586C0"}},"        return"),s("span",{style:{color:"#C586C0","--shiki-dark":"#C586C0"}}," new"),s("span",{style:{color:"#DCDCAA","--shiki-dark":"#DCDCAA"}}," TestConfigDemo"),s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"();")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),u=e(`<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"># application.yaml</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">user</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&#39;zhang&#39;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  age</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">18</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enableconfigurationproperties" tabindex="-1"><a class="header-anchor" href="#enableconfigurationproperties"><span>@EnableConfigurationProperties</span></a></h2><p>用 <code>@EnableConfigurationProperties</code>注解使 <code>@ConfigurationProperties</code>生效</p><p>当<code>@EnableConfigurationProperties</code>注解应用到你的<code>@Configuration</code>时，任何被<code>@ConfigurationProperties</code>注解的<code>beans</code>将自动被<code>Environment</code>属性配置。 这种风格的配置特别适合与<code>SpringApplication</code>的外部<code>YAML</code>配置进行配合使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">EnableConfigurationProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">({</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RabbitProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> RabbitAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// RabbitProperties.class</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConfigurationProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    prefix = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;spring.rabbitmq&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> RabbitProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>@Controller</span></a></h2><p><code>@Controller</code>是<code>@Component</code>注解的一个延伸，<code>Spring</code>会自动扫描并配置被该注解标注的类。此注解用于标注<code>Spring MVC</code>的控制器</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Controller</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="restcontroller" tabindex="-1"><a class="header-anchor" href="#restcontroller"><span>@RestController</span></a></h2><p>组合<code>@Controller</code>和<code>@ResponseBody</code></p><p>表明这个类是一个全<code>RESTful</code>的控制器，不返回视图，只返回数据</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Target</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ElementType</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">TYPE</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Retention</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RetentionPolicy</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RUNTIME</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Documented</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Controller</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ResponseBody</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> @</span><span style="color:#569CD6;--shiki-dark:#569CD6;">interface</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> RestController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">AliasFor</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(annotation = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Controller</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">	String</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> value</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() </span><span style="color:#C586C0;--shiki-dark:#C586C0;">default</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestmapping" tabindex="-1"><a class="header-anchor" href="#requestmapping"><span>@RequestMapping</span></a></h2><p>用来映射<code>web</code>请求(访问路径和参数)、处理类和方法，可以使用在类或方法上。</p><p>注解在方法上的路径会继承注解在类上的路径</p><p>主要用途是将<code>Web</code>请求与请求处理类中的方法进行映射。<code>Spring MVC</code>和<code>Spring WebFlux</code>都通过<code>RquestMappingHandlerMapping</code>和<code>RequestMappingHndlerAdapter</code>两个类来提供对<code>@RequestMapping</code>注解的支持。</p><ul><li><code>value</code>: 请求路径</li><li><code>method</code>: 请求类型</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/page</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;page&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">lists</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(lists);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getmapping" tabindex="-1"><a class="header-anchor" href="#getmapping"><span>@GetMapping</span></a></h2><p><code>@GetMapping</code>注解用于处理<code>HTTP</code> <code>GET</code>请求，并将请求映射到具体的处理方法中</p><p><code>@GetMapping</code>是一个组合注解，它相当于是<code>@RequestMapping(method=RequestMethod.GET)</code>的快捷方式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/page</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">GetMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;page&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">lists</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(lists);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="postmapping" tabindex="-1"><a class="header-anchor" href="#postmapping"><span>@PostMapping</span></a></h2><p><code>@PostMapping</code>注解用于处理<code>HTTP</code> <code>POST</code>请求，并将请求映射到具体的处理方法中</p><p>相当于<code>@RequestMapping(method=RequestMethod.POST)</code>的快捷方式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/page</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PostMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;page&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">lists</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(lists);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="putmapping" tabindex="-1"><a class="header-anchor" href="#putmapping"><span>@PutMapping</span></a></h2><p><code>@PutMapping</code>注解用于处理<code>HTTP</code> <code>PUT</code>请求，并将请求映射到具体的处理方法中</p><p>相当于<code>@RequestMapping(method=HttpMethod.PUT)</code>的快捷方式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/page</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PutMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;page&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">lists</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(lists);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deletemapping" tabindex="-1"><a class="header-anchor" href="#deletemapping"><span>@DeleteMapping</span></a></h2><p><code>@DeleteMapping</code>注解用于处理<code>HTTP</code> <code>DELETE</code>请求，并将请求映射到删除方法中</p><p>它相当于是<code>@RequestMapping(method=HttpMethod.DELETE)</code>的快捷方式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/page</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">DeleteMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;page&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">lists</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(lists);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="patchmapping" tabindex="-1"><a class="header-anchor" href="#patchmapping"><span>@PatchMapping</span></a></h2><p><code>@PatchMapping</code>注解用于处理<code>HTTP</code> <code>PATCH</code>请求，并将请求映射到对应的处理方法中</p><p>相当于是<code>@RequestMapping(method=HttpMethod.PATCH)</code>的快捷方式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/page</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PatchMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;page&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">lists</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(lists);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam"><span>@RequestParam</span></a></h2><p>获取<code>request</code>请求的参数值，就是请求路径中 <code>?</code> 后的参数值，默认必填，不传会报错。</p><p>可以使用 <code>required = false</code> 来设置非必填</p><p>如果传递的参数为空，还可以通过<code>defaultValue</code>设置一个默认值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 例 http://localhost:8080/user/getById?id=5</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/getById</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;getById&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getById</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestParam</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, defaultValue = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;1&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, required = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Long</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> id</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) { </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 5</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        User</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> user</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getById</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(id);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(lists);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody"><span>@Requestbody</span></a></h2><p>将前端传过来的<code>json</code>格式转成自己需要的<code>javabean</code>对象，需要注意的是前端传的参数名称要和<code>javabean</code>中的保持一致</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // user/getById</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;getById&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> R</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getById</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestBody</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> User</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> user</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) { </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // ...</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> R</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">ok</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pathvariable" tabindex="-1"><a class="header-anchor" href="#pathvariable"><span>@PathVariable</span></a></h2><p>用来获得请求<code>url</code>中的路径参数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Controller</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {  </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">	 // http://localhost:8080/user/5</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">     @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;/user/{userId}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)  </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">     public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getUser</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PathVariable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userId&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> userId</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">         System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;User Id : &quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + userId); </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 5</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">     }  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="responsebody" tabindex="-1"><a class="header-anchor" href="#responsebody"><span>@ResponseBody</span></a></h2><p>支持将返回值放在<code>response</code>体内，而不是返回一个页面。可以用此注解返回数据而不是页面。此注解可以放置在类和方法上。若放置在类上，表明该类中所有方法均返回数据。</p><p><code>@ResponseBody</code>注解只能用在被<code>@Controller</code>注解标记的类中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Controller</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ResponseBody</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="responsestatus" tabindex="-1"><a class="header-anchor" href="#responsestatus"><span>@ResponseStatus</span></a></h2><p><code>@ResponseStatus</code>注解可以标注请求处理方法。使用此注解，可以指定响应所需要的<code>HTTP</code> <code>STATUS</code></p><p>特别地，我们可以使用<code>HttpStauts</code>类对该注解的<code>value</code>属性进行赋值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Controller</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {  </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">	 // http://localhost:8080/user/5</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">     @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ResponseStatus</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">HttpStatus</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">BAD_REQUEST</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">     @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;/user/{userId}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)  </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">     public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getUser</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PathVariable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userId&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> userId</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">         System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;User Id : &quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + userId); </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 5</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">     }  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="crossorigin" tabindex="-1"><a class="header-anchor" href="#crossorigin"><span>@CrossOrigin</span></a></h2><p><code>@CrossOrigin</code>注解将为请求处理类或请求处理方法提供跨域调用支持</p><p>如果我们将此注解标注类，那么类中的所有方法都将获得支持跨域的能力</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CrossOrigin</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getAllUser</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// = = = = = = = = = = = = = = = = = = =</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CrossOrigin</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Student</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controlleradvice" tabindex="-1"><a class="header-anchor" href="#controlleradvice"><span>@ControllerAdvice</span></a></h2><p>常见三种使用常见</p><ul><li>全局异常处理</li><li>全局数据绑定</li><li>全局数据预处理</li></ul><p><code>@ControllerAdvice</code>是<code>@Component</code>注解的一个延伸注解，<code>Spring</code>会自动扫描并检测被<code>@ControllerAdvice</code>所标注的类。<code>@ControllerAdvice</code>需要和<code>@ExceptionHandler</code>、<code>@InitBinder</code>以及<code>@ModelAttribute</code>注解搭配使用，主要是用来处理控制器所抛出的异常信息</p><h2 id="exceptionhandler" tabindex="-1"><a class="header-anchor" href="#exceptionhandler"><span>@ExceptionHandler</span></a></h2><p>当控制器中的方法抛出异常时，<code>Spring</code>会自动捕获异常，并将捕获的异常信息传递给被<code>@ExceptionHandler</code>标注的方法</p><p>需要配置<code>@ControllerAdvice</code>使用</p><h2 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional"><span>@Transactional</span></a></h2><p>事务注解，需要在启动类添加<code>@EnableTransactionManagement</code>开启注解式事务的支持。</p><p><code>@Transactional</code> 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息</p><p>当类级别配置了<code>@Transactional</code>，方法级别也配置了<code>@Transactional</code>，应用程序会以方法级别的事务属性信息来管理事务，换言之，方法级别的事务属性信息会覆盖类级别的相关配置信息</p><p>配置项如下</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>当配置文件种存在多个TransactionalManager，可以使用该属性指定使用哪个事务管理器</td></tr><tr><td>propagation</td><td>事物的传播行为，默认REQUIRED</td></tr><tr><td>isolation</td><td>事物的隔离度，默认DEFAULT</td></tr><tr><td>timeout</td><td>事务的超时时间，默认为-1。如果超时还未完成，则自动回滚事务</td></tr><tr><td>readOnly</td><td>指定事务是否只读，默认false，为了忽略那些不需要事务的方法，比如查询数据，可以设置readOnly为true</td></tr><tr><td>rollback-for</td><td>用于指定能够触发事务回滚的异常类型，多个异常之间通过逗号分隔</td></tr><tr><td>no-rollback-for</td><td>抛出 no-rollback-for指定的异常类型，不回滚事务</td></tr></tbody></table><h2 id="transient" tabindex="-1"><a class="header-anchor" href="#transient"><span>@Transient</span></a></h2><p>如果一个属性并非数据库表的字段映射，就务必将其标示为<code>@Transient</code>，否则ORM框架默认其注解为<code>@Basic</code></p><h2 id="schema" tabindex="-1"><a class="header-anchor" href="#schema"><span>@Schema</span></a></h2><p><code>@schema</code>注解标注在<code>class</code>上，表示此类对应的数据库表对应的<code>schema</code></p><p>可以用如下语句判断某个实体类上是否带有<code>@schema</code>注解，从而得到<code>schema</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">bean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">().</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">isAnnotationPresent</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Schema</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="bean" tabindex="-1"><a class="header-anchor" href="#bean"><span>@Bean</span></a></h2><p>主要的作用是告知<code>Spring</code>，被此注解所标注的类将需要纳入到<code>Bean</code>管理工厂中</p><p>定义在方法上，在容器内初始化一个<code>bean</code>实例类。</p><ul><li><code>name</code>: <code>bean</code>的名字</li><li><code>initMethod</code>: 初始化时要调用的方法</li><li><code>destroyMethod</code>: 销毁时要调用的方法</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name=</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userService&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,initMethod=</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;initUserService&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,destroyMethod=</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;closeUserService&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">	return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scope" tabindex="-1"><a class="header-anchor" href="#scope"><span>@Scope</span></a></h2><p><code>@Scope</code>注解可以用来定义<code>@Component</code>标注的类的作用范围以及<code>@Bean</code>所标记的类的作用范围</p><p><code>@Scope</code>所限定的作用范围有：<code>singleton</code>、<code>prototype</code>、<code>request</code>、<code>session</code>、<code>globalSession</code>或者其他的自定义范围</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Scope</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(value = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ConfigurableBeanFactory</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">SCOPE_PROTOTYPE</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserServiceImpl</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Scope</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(value = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ConfigurableBeanFactory</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">SCOPE_PROTOTYPE</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getUserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="primary" tabindex="-1"><a class="header-anchor" href="#primary"><span>@Primary</span></a></h2><p>当系统中需要配置多个具有相同类型的<code>bean</code>时，<code>@Primary</code>可以定义这些<code>Bean</code>的优先级</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> DingUser</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sendMessage</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;this is DingsUser&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Primary</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> WeChatUser</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sendMessage</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;this is WeChatUser&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">sendMessage</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// this is DingsUser</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entity" tabindex="-1"><a class="header-anchor" href="#entity"><span>@Entity</span></a></h2><p>注解标记这是一个实体类，用于映射数据库中的表 需要在启动类上添加<code>@EntityScan</code>扫描该注解</p><blockquote><p>有<code>MyBatis</code>的存在，显得没啥大用</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Entity</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">EntityScan</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(basePackages = {</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;com.zhang.common.api.*&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;com.zhang.*&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> AppRun</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> main</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">args</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        SpringApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">run</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">AppRun</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, args);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="profile" tabindex="-1"><a class="header-anchor" href="#profile"><span>@Profile</span></a></h2><p>指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件</p><h2 id="componentscan" tabindex="-1"><a class="header-anchor" href="#componentscan"><span>@ComponentScan</span></a></h2><p><code>@ComponentScan</code>注解默认就会装配标识了<code>@Controller</code>，<code>@Service</code>，<code>@Repository</code>，<code>@Component</code>注解的类到<code>spring</code>容器中</p><p>可以通过配置其<code>basePackages</code>属性或者<code>value</code>属性来配置需要扫描的包路径。<code>value</code>属性是<code>basePackages</code>的别名</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ComponentScan</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(basePackages = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;com.zhang.xx&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="service、-controller、-repository、-component" tabindex="-1"><a class="header-anchor" href="#service、-controller、-repository、-component"><span>@Service、@Controller、@Repository、@Component</span></a></h2><p><code>@Service</code>：用于标注业务层组件</p><p><code>@Controller</code>：用于标注控制层组件</p><p><code>@Repository</code>：用于标注数据访问组件，即<code>DAO</code>组件</p><p><code>@Component</code>：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本质上没有任何区别，只是为了好区分不同组件而封装的多个不同名注解</p></div><h2 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired"><span>@Autowired</span></a></h2><p>使用 <code>@Autowired</code> 注解进行自动注入(默认按类型自动注入)，<code>Spring</code> 容器中匹配的候选 <code>Bean</code> 数目必须有且仅有一个。</p><p>当找不到一个匹配的 <code>Bean</code> 时，<code>Spring</code> 容器将抛出 <code>BeanCreationException</code> 异常，并指出必须至少拥有一个匹配的 <code>Bean</code>。</p><p>当不能确定 <code>Spring</code> 容器中一定拥有某个类的 <code>Bean</code> 时，可以在需要自动注入该类 <code>Bean</code> 的地方可以使用 <code>@Autowired(required = false)</code>，这等于告诉 <code>Spring</code>: 在找不到匹配 <code>Bean</code> 时也不报错</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Autowired</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若既要按类型注入，又要匹配名称，则可以配合 <code>@Qualifier</code> 注解使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Autowired</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Qualifier</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userService&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 进一步指明注入 bean 名称为 userService</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="qualifier" tabindex="-1"><a class="header-anchor" href="#qualifier"><span>@Qualifier</span></a></h2><p>当系统中存在同一类型的多个<code>Bean</code>时，<code>@Autowired</code>在进行依赖注入的时候就不知道该选择哪一个实现类进行注入。此时，我们可以使用<code>@Qualifier</code>注解来微调，帮助<code>@Autowired</code>选择正确的依赖项</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Service</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userServiceA&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserServiceA</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Service</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userServiceB&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserServiceB</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Service</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userServiceC&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserServiceC</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Autowired</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Qualifier</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;userServiceC&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Uservice</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> uservice</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 此时注入的就是userServiceC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resource" tabindex="-1"><a class="header-anchor" href="#resource"><span>@Resource</span></a></h2><p><code>@Resource</code>注解与<code>@Autowired</code>类似，也是用来提供依赖注入的，<code>@Resource</code>注解是<code>Java</code>层面所提供的注解，</p><p><code>@Autowired</code>是<code>Spring</code>所提供的注解，<code>@Resource</code>注解中有一个<code>name</code>属性，针对<code>name</code>属性是否有值，<code>@Resource</code>底层流程是不同的。</p><p><code>@Resource</code>如果<code>name</code>属性有值，那么<code>Spring</code>容器将根据<code>beanName</code>去容器里面找到对应的<code>bean</code>，找不到会报错</p><p>如果没有值，则： 1、先判断该属性名字在<code>Spring</code>容器中是否存在<code>Bean</code>对象。</p><p>2、如果存在，则成功找到<code>Bean</code>对象进行注入。</p><p>3、如果不存在，则根据属性类型去<code>Spring</code>容器找<code>bean</code>对象，找到一个进行注入</p><h2 id="aspect" tabindex="-1"><a class="header-anchor" href="#aspect"><span>@Aspect</span></a></h2><p>注解标记这是一个切面类，而<code>@Before</code>和<code>@After</code>则用于标记前置和后置通知</p><h2 id="enableasync" tabindex="-1"><a class="header-anchor" href="#enableasync"><span>@EnableAsync</span></a></h2><p>配置类中通过此注解开启对异步任务的支持</p><p><code>@EnableAsync</code>通过向<code>Spring</code>引入后置处理器<code>AsyncAnnotationBeanPostProcessor</code>，在<code>bean</code>的创建过程中对<code>bean</code>进行<code>advisor</code>增强，对<code>@Async</code>标识的<code>bean</code>增强异步功能</p><h2 id="async" tabindex="-1"><a class="header-anchor" href="#async"><span>@Async</span></a></h2><p>在实际执行的<code>bean</code>方法使用该注解来声明其是一个异步任务（方法上或类上所有的方法都将异步，需要<code>@EnableAsync</code>开启异步任务）</p><h2 id="enablescheduling" tabindex="-1"><a class="header-anchor" href="#enablescheduling"><span>@EnableScheduling</span></a></h2><p>在配置类上使用，开启定时任务的支持</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">EnableScheduling</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> //开启定时任务</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MainApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> main</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">args</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        SpringApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">run</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">MainApplication</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, args);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scheduled" tabindex="-1"><a class="header-anchor" href="#scheduled"><span>@Scheduled</span></a></h2><p>来申明这是一个任务，包括<code>cron,fixDelay,fixRate</code>等类型（方法上，需先开启计划任务的支持）</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>@Configuration</span></a></h2><p>标注在类上，表示这是一个配置类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 表示这是一个配置类,可以给这个配置类也起一个名字</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Config</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">	// ...   </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法将会被<code>AnnotationConfigApplicationContext</code>或<code>AnnotationConfigWebApplicationContext</code>类进行扫描，并用于构建<code>bean</code>定义，初始化<code>Spring</code>容器</p><p><code>@Configuration</code>注解最常见的搭配使用有两个：</p><ul><li><p><code>@Bean</code>：等价于<code>Spring</code>中的<code>bean</code>标签用于注册<code>bean</code>对象的，给容器中添加组件，一般以方法名作为组件的<code>id</code>，配置类里面使用<code>@Bean</code>标注在方法上给容器注册组件，默认是单实例的</p></li><li><p><code>@Scope</code>：用于声明该<code>bean</code>的作用域，作用域有<code>singleton</code>、<code>prototype</code>、<code>request</code>、<code>session</code></p></li></ul><p><code>@Configuration</code>中的属性<code>proxyBeanMethods</code>是及其重要的，设置<code>true/false</code>会得到不同的效果</p><ul><li><code>proxyBeanMethods = true</code>的情况下，保持单实例对象</li><li><code>proxyBeanMethods = false</code>的情况下，不进行检查<code>IOC</code>容器中是否存在，而是简单的调用方法进行创建对象，无法保持单实例</li></ul><p>简单来说，就相当于<code>true</code>只调用一次，而<code>false</code>会调用多次</p><h2 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>@Import</span></a></h2><p>通过导入的方式实现把实例加入<code>springIOC</code>容器中。可以在需要时将没有被<code>Spring</code>容器管理的类导入至<code>Spring</code>容器中</p><p>导入<code>MyConfig</code>配置类里实例化的<code>bean</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MyConfig</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CompactDisc</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> compactDisc</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> CompactDisc</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(); </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Import</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">MyConfig</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)  </span><span style="color:#6A9955;--shiki-dark:#6A9955;">//导入MyConfig的配置</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CDPlayerConfig</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;cDPlayer&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CDPlayer</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> cdPlayer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompactDisc</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> compactDisc</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {  </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">         // 这里会注入CompactDisc类型的bean</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">         // 这里注入的这个bean是MyConfig.class中的CompactDisc类型的那个bean</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> CDPlayer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(compactDisc);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="order" tabindex="-1"><a class="header-anchor" href="#order"><span>@Order</span></a></h2><p>可标注在类、方法、字段上，值越小优先级超高，越先运行</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Order</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserController</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="autoconfigureafter" tabindex="-1"><a class="header-anchor" href="#autoconfigureafter"><span>@AutoConfigureAfter</span></a></h2><p>用在自动配置类上面，表示该自动配置类需要在另外指定的自动配置类配置完之后</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">AutoConfigureAfter</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">DataSourceAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MybatisAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="autoconfigurebefore" tabindex="-1"><a class="header-anchor" href="#autoconfigurebefore"><span>@AutoConfigureBefore</span></a></h2><p>这个和<code>@AutoConfigureAfter</code>注解使用相反，表示该自动配置类需要在另外指定的自动配置类配置之前</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">AutoConfigureAfter</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">DataSourceAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MybatisAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="autoconfigureorder" tabindex="-1"><a class="header-anchor" href="#autoconfigureorder"><span>@AutoConfigureOrder</span></a></h2><p>用于确定配置加载的优先级顺序</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 自动配置里面的最高优先级</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">AutoConfigureOrder</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Ordered</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">HIGHEST_PRECEDENCE</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnWebApplication</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> // 仅限于web应用</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Import</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">BeanPostProcessorsRegistrar</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 导入内置容器的设置</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> EmbeddedServletContainerAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modelattribute" tabindex="-1"><a class="header-anchor" href="#modelattribute"><span>@ModelAttribute</span></a></h2><p>通过此注解，可以通过模型索引名称来访问已经存在于控制器中的<code>model</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PostMapping</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;/users&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> users</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ModelAttribute</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> user) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    userService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">save</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(user);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与<code>@PathVariable</code>和<code>@RequestParam</code>注解一样，如果参数名与模型具有相同的名字，则不必指定索引名称</p><p>如果使用<code>@ModelAttribute</code>对方法进行标注，<code>Spring</code>会将方法的返回值绑定到具体的<code>Model</code>上</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ModelAttribute</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> User</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getUser</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    User</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> user</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    user</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">setId</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">10</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> user;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>Spring</code>调用具体的处理方法之前，被<code>@ModelAttribute</code>注解标注的所有方法都将被执行</p><h2 id="jsonignore" tabindex="-1"><a class="header-anchor" href="#jsonignore"><span>@JsonIgnore</span></a></h2><p>作用：在<code>json</code>序列化时将<code>java bean</code>中的一些属性忽略掉，序列化和反序列化都受影响</p><p>使用方法：一般标记在属性或者方法上，返回的<code>json</code>数据即不包含该属性</p><p>注解失效：如果注解失效，可能是因为你使用的是<code>fastJson</code>，尝试使用对应的注解来忽略字段，注解为：<code>@JSONField(serialize = false)</code>，使用方法一样</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//生成json 时不生成age 属性</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> user</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">JsonIgnore</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> age</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsonignoreproperties" tabindex="-1"><a class="header-anchor" href="#jsonignoreproperties"><span>@JsonIgnoreProperties</span></a></h2><p>此注解是类注解，作用是<code>json</code>序列化时将<code>java bean</code>中的一些属性忽略掉，序列化和反序列化都受影响</p><p>写法将此标签加在<code>user</code>类的类名上 ，可以多个属性也可以单个属性</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//生成json时将name和age属性过滤</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">JsonIgnoreProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">({</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">},{</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">  user</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">  String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> age</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> address</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsonformat" tabindex="-1"><a class="header-anchor" href="#jsonformat"><span>@JsonFormat</span></a></h2><p>此注解用于属性或者方法上（最好是属性上），可以方便的把<code>Date</code>类型直接转化为我们想要的模式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> User</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">JsonFormat</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(pattern = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;yyyy-MM-dd HH-mm-ss&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Date</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> date</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsonproperty" tabindex="-1"><a class="header-anchor" href="#jsonproperty"><span>@JsonProperty</span></a></h2><p><code>@JsonProperty</code> 可以指定某个属性和<code>json</code>映射的名称。例如我们有个<code>json</code>字符串为<code>{&quot;user_name&quot;: &quot;aaa&quot;}</code>，而<code>java</code>中命名要遵循驼峰规则，则为<code>userName</code>，这时通过<code>@JsonProperty</code> 注解来指定两者的映射规则即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> SomeEntity</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">JsonProperty</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> userName</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsonserialize" tabindex="-1"><a class="header-anchor" href="#jsonserialize"><span>@JsonSerialize</span></a></h2><p>此注解用于属性或者<code>getter</code>方法上，用于在序列化时嵌入我们自定义的代码，比如序列化一个<code>double</code>时在其后面限制两位小数点</p><h2 id="jsondeserialize" tabindex="-1"><a class="header-anchor" href="#jsondeserialize"><span>@JsonDeserialize</span></a></h2><p>此注解用于属性或者<code>setter</code>方法上，用于在反序列化时可以嵌入我们自定义的代码，类似于上面的<code>@JsonSerialize</code></p><h2 id="jsonignoretype" tabindex="-1"><a class="header-anchor" href="#jsonignoretype"><span>@JsonIgnoreType</span></a></h2><p>标注在类上，当其他类有该类作为属性时，该属性将被忽略</p><h2 id="postconstruct、-predestroy" tabindex="-1"><a class="header-anchor" href="#postconstruct、-predestroy"><span>@PostConstruct、@PreDestroy</span></a></h2><p><code>@PostConstruct</code>注解用于标注<code>Bean</code>被<code>Spring</code>初始化之前需要执行的方法</p><p><code>@PreDestroy</code>注解用于标注<code>Bean</code>被销毁前需要执行的方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">list</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PostConstruct</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> init</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() { </span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    list</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">add</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    list</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">add</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // . . .</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">PreDestroy</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> destroy {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // . . .</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    list</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">clear</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="runwith" tabindex="-1"><a class="header-anchor" href="#runwith"><span>@RunWith</span></a></h2><p>运行器，<code>Spring</code>中通常用于对<code>JUnit</code>的支持</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RunWith</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">SpringRunner</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> TestSearch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Test</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> test1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="importselector" tabindex="-1"><a class="header-anchor" href="#importselector"><span>@ImportSelector</span></a></h2><p>返回需要导入的组件的全类名数组</p><h2 id="importbeandefinitionregistrar" tabindex="-1"><a class="header-anchor" href="#importbeandefinitionregistrar"><span>@ImportBeanDefinitionRegistrar</span></a></h2><p>手动注册<code>bean</code>到容器中</p><h2 id="conditional" tabindex="-1"><a class="header-anchor" href="#conditional"><span>@Conditional</span></a></h2><p>通过<code>@Conditional</code>注解可以根据代码中设置的条件装载不同的<code>bean</code>，在设置条件注解之前，先要把装载的<code>bean</code>类去实现<code>Condition</code>接口，然后对该实现接口的类设置是否装载的条件。</p><p><code>Spring Boot</code>注解中的<code>@ConditionalOnProperty</code>、<code>@ConditionalOnBean</code>等以<code>@Conditional</code>开头的注解，都是通过集成了<code>@Conditional</code>来实现相应功能的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Conditioanl</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CustomConditioanl</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)  </span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CustomProperties</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> addCustomProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){  </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"> //...  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonbean" tabindex="-1"><a class="header-anchor" href="#conditionalonbean"><span>@ConditionalOnBean</span></a></h2><p><code>@ConditionalOnBean(A.class)</code>仅仅在当前上下文中存在A对象时，才会实例化一个<code>Bean</code>，也就是说只有当<code>A.class</code> 在<code>spring</code>的<code>applicationContext</code>中存在时，这个当前的<code>bean</code>才能够创建</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnBean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name=</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;dataSource&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)  </span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">LocalContainerEntityManagerFactoryBean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> entityManagerFactory</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){  </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"> //...  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">} </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonmissingbean" tabindex="-1"><a class="header-anchor" href="#conditionalonmissingbean"><span>@ConditionalOnMissingBean</span></a></h2><p>和<code>@ConditionalOnBean</code>注解相反，仅仅在当前上下文中不存在A对象时，才会实例化一个<code>Bean</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnMissingBean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MyBean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> myBean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){  </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"> //...  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonwebapplication" tabindex="-1"><a class="header-anchor" href="#conditionalonwebapplication"><span>@ConditionalOnWebApplication</span></a></h2><p>当前项目类型是 <code>WEB</code> 项目才开启配置。当前项目有以下 3 种类型:</p><ul><li><code>ANY</code>(任何<code>Web</code>项目都匹配)</li><li><code>SERVLET</code>（仅但基础的<code>Servelet</code>项目才会匹配）</li><li><code>REACTIVE</code>（只有基于响应的<code>web</code>应用程序才匹配）</li></ul><h2 id="conditionalonnotwebapplication" tabindex="-1"><a class="header-anchor" href="#conditionalonnotwebapplication"><span>@ConditionalOnNotWebApplication</span></a></h2><p>和<code>@ConditionalOnWebApplication</code> 注解相反，当前项目类型不是 <code>WEB</code> 项目才开启配置</p><h2 id="conditionalonproperty" tabindex="-1"><a class="header-anchor" href="#conditionalonproperty"><span>@ConditionalOnProperty</span></a></h2><p>当指定的属性有指定的值时才开启配置</p><p>具体操作是通过其两个属性<code>name</code>以及<code>havingValue</code>来实现的，其中<code>name</code>用来从<code>application.properties</code>中读取某个属性值，如果该值为空，则返回<code>false</code>;如果值不为空，则将该值与<code>havingValue</code>指定的值进行比较，如果一样则返回<code>true</code>;否则返回<code>false</code>。如果返回值为<code>false</code>，则该<code>configuration</code>不生效；为<code>true</code>则生效</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnProperty</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name=</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;alipay&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,havingValue=</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;on&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)  </span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Alipay</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> alipay</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){  </span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;"> return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Alipay</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonexpression" tabindex="-1"><a class="header-anchor" href="#conditionalonexpression"><span>@ConditionalOnExpression</span></a></h2><p>当表达式为<code>true</code>的时，配置类才会生效</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnExpression</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;\${enabled.flag}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MyBatisConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> OrderMessageMonitor</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> orderMessageMonitor</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConfigContext</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> configContext</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> OrderMessageMonitor</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(configContext);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonjava" tabindex="-1"><a class="header-anchor" href="#conditionalonjava"><span>@ConditionalOnJava</span></a></h2><p>当运行的 <code>Java JVM</code> 在指定的版本范围时才开启配置</p><h2 id="conditionalonclass" tabindex="-1"><a class="header-anchor" href="#conditionalonclass"><span>@ConditionalOnClass</span></a></h2><p>该注解的参数对应的类必须存在，否则该注解修饰的配置类不生效</p><p>仅当某些类存在于<code>classpath</code>上时候才创建某个<code>Bean</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//（条件装配）只有在我们的classpath目录下有Redisson.class </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 我们才自动装配RedissonAutoConfiguration bean</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Redisson</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">EnableConfigurationProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RedissonProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> RedissonAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> PREFIX</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">=</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;redis://&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> RedissonClient</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> redissonClient</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RedissonProperties</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> redissonProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Config</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> config</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">=</span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Config</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        config</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">useSingleServer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">().</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">setAddress</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(PREFIX+</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">redissonProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getHost</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()+</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;:&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">+</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">redissonProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getPort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">setConnectTimeout</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">redissonProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getTimeout</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> Redisson</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">create</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(config);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonmisssingclass" tabindex="-1"><a class="header-anchor" href="#conditionalonmisssingclass"><span>@ConditionalOnMisssingClass</span></a></h2><p>和<code>@ConditionalOnMissingClass</code>注解相反，当<code>classpath</code>中没有指定的 <code>Class</code>才开启配置</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnMisssingClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">({</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ApplicationManager</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> TeacherAutoConfiguration</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonresource" tabindex="-1"><a class="header-anchor" href="#conditionalonresource"><span>@ConditionalOnResource</span></a></h2><p>当类路径下有指定的资源才开启配置</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ConditionalOnResource</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(resources = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;classpath:website.properties&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)  </span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Properties</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> addWebsiteProperties</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){  </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"> //...  </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conditionalonjndi" tabindex="-1"><a class="header-anchor" href="#conditionalonjndi"><span>@ConditionalOnJndi</span></a></h2><p>当指定的 <code>JNDI</code> 存在时才开启配置</p><h2 id="conditionaloncloudplatform" tabindex="-1"><a class="header-anchor" href="#conditionaloncloudplatform"><span>@ConditionalOnCloudPlatform</span></a></h2><p>当指定的云平台激活时才开启配置</p><h2 id="conditionalonsinglecandidate" tabindex="-1"><a class="header-anchor" href="#conditionalonsinglecandidate"><span>@ConditionalOnSingleCandidate</span></a></h2><p>当指定的 <code>class</code> 在容器中只有一个 <code>Bean</code>，或者同时有多个但为首选时才开启配置</p>`,241);function v(E,b){const o=D("CodeTabs");return p(),d("div",null,[k,c(o,{id:"116",data:[{id:"第一种方式"},{id:"第二种方式"},{id:"第三种方式"}]},{title0:n(({value:i,isActive:l})=>[a("第一种方式")]),title1:n(({value:i,isActive:l})=>[a("第二种方式")]),title2:n(({value:i,isActive:l})=>[a("第三种方式")]),tab0:n(({value:i,isActive:l})=>[h]),tab1:n(({value:i,isActive:l})=>[C]),tab2:n(({value:i,isActive:l})=>[y]),_:1}),u])}const g=r(t,[["render",v],["__file","Annotation.html.vue"]]),B=JSON.parse('{"path":"/Use/Java/SpringBoot/Annotation.html","title":"SpringBoot注解汇总","lang":"zh-CN","frontmatter":{"category":"使用篇"},"headers":[{"level":2,"title":"@SpringBootApplication","slug":"springbootapplication","link":"#springbootapplication","children":[]},{"level":2,"title":"@EnableAutoConfiguration","slug":"enableautoconfiguration","link":"#enableautoconfiguration","children":[]},{"level":2,"title":"@SpringBootConfiguration","slug":"springbootconfiguration","link":"#springbootconfiguration","children":[]},{"level":2,"title":"@ImportResource","slug":"importresource","link":"#importresource","children":[]},{"level":2,"title":"@Value","slug":"value","link":"#value","children":[]},{"level":2,"title":"@ConfigurationProperties","slug":"configurationproperties","link":"#configurationproperties","children":[]},{"level":2,"title":"@EnableConfigurationProperties","slug":"enableconfigurationproperties","link":"#enableconfigurationproperties","children":[]},{"level":2,"title":"@Controller","slug":"controller","link":"#controller","children":[]},{"level":2,"title":"@RestController","slug":"restcontroller","link":"#restcontroller","children":[]},{"level":2,"title":"@RequestMapping","slug":"requestmapping","link":"#requestmapping","children":[]},{"level":2,"title":"@GetMapping","slug":"getmapping","link":"#getmapping","children":[]},{"level":2,"title":"@PostMapping","slug":"postmapping","link":"#postmapping","children":[]},{"level":2,"title":"@PutMapping","slug":"putmapping","link":"#putmapping","children":[]},{"level":2,"title":"@DeleteMapping","slug":"deletemapping","link":"#deletemapping","children":[]},{"level":2,"title":"@PatchMapping","slug":"patchmapping","link":"#patchmapping","children":[]},{"level":2,"title":"@RequestParam","slug":"requestparam","link":"#requestparam","children":[]},{"level":2,"title":"@Requestbody","slug":"requestbody","link":"#requestbody","children":[]},{"level":2,"title":"@PathVariable","slug":"pathvariable","link":"#pathvariable","children":[]},{"level":2,"title":"@ResponseBody","slug":"responsebody","link":"#responsebody","children":[]},{"level":2,"title":"@ResponseStatus","slug":"responsestatus","link":"#responsestatus","children":[]},{"level":2,"title":"@CrossOrigin","slug":"crossorigin","link":"#crossorigin","children":[]},{"level":2,"title":"@ControllerAdvice","slug":"controlleradvice","link":"#controlleradvice","children":[]},{"level":2,"title":"@ExceptionHandler","slug":"exceptionhandler","link":"#exceptionhandler","children":[]},{"level":2,"title":"@Transactional","slug":"transactional","link":"#transactional","children":[]},{"level":2,"title":"@Transient","slug":"transient","link":"#transient","children":[]},{"level":2,"title":"@Schema","slug":"schema","link":"#schema","children":[]},{"level":2,"title":"@Bean","slug":"bean","link":"#bean","children":[]},{"level":2,"title":"@Scope","slug":"scope","link":"#scope","children":[]},{"level":2,"title":"@Primary","slug":"primary","link":"#primary","children":[]},{"level":2,"title":"@Entity","slug":"entity","link":"#entity","children":[]},{"level":2,"title":"@Profile","slug":"profile","link":"#profile","children":[]},{"level":2,"title":"@ComponentScan","slug":"componentscan","link":"#componentscan","children":[]},{"level":2,"title":"@Service、@Controller、@Repository、@Component","slug":"service、-controller、-repository、-component","link":"#service、-controller、-repository、-component","children":[]},{"level":2,"title":"@Autowired","slug":"autowired","link":"#autowired","children":[]},{"level":2,"title":"@Qualifier","slug":"qualifier","link":"#qualifier","children":[]},{"level":2,"title":"@Resource","slug":"resource","link":"#resource","children":[]},{"level":2,"title":"@Aspect","slug":"aspect","link":"#aspect","children":[]},{"level":2,"title":"@EnableAsync","slug":"enableasync","link":"#enableasync","children":[]},{"level":2,"title":"@Async","slug":"async","link":"#async","children":[]},{"level":2,"title":"@EnableScheduling","slug":"enablescheduling","link":"#enablescheduling","children":[]},{"level":2,"title":"@Scheduled","slug":"scheduled","link":"#scheduled","children":[]},{"level":2,"title":"@Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"@Import","slug":"import","link":"#import","children":[]},{"level":2,"title":"@Order","slug":"order","link":"#order","children":[]},{"level":2,"title":"@AutoConfigureAfter","slug":"autoconfigureafter","link":"#autoconfigureafter","children":[]},{"level":2,"title":"@AutoConfigureBefore","slug":"autoconfigurebefore","link":"#autoconfigurebefore","children":[]},{"level":2,"title":"@AutoConfigureOrder","slug":"autoconfigureorder","link":"#autoconfigureorder","children":[]},{"level":2,"title":"@ModelAttribute","slug":"modelattribute","link":"#modelattribute","children":[]},{"level":2,"title":"@JsonIgnore","slug":"jsonignore","link":"#jsonignore","children":[]},{"level":2,"title":"@JsonIgnoreProperties","slug":"jsonignoreproperties","link":"#jsonignoreproperties","children":[]},{"level":2,"title":"@JsonFormat","slug":"jsonformat","link":"#jsonformat","children":[]},{"level":2,"title":"@JsonProperty","slug":"jsonproperty","link":"#jsonproperty","children":[]},{"level":2,"title":"@JsonSerialize","slug":"jsonserialize","link":"#jsonserialize","children":[]},{"level":2,"title":"@JsonDeserialize","slug":"jsondeserialize","link":"#jsondeserialize","children":[]},{"level":2,"title":"@JsonIgnoreType","slug":"jsonignoretype","link":"#jsonignoretype","children":[]},{"level":2,"title":"@PostConstruct、@PreDestroy","slug":"postconstruct、-predestroy","link":"#postconstruct、-predestroy","children":[]},{"level":2,"title":"@RunWith","slug":"runwith","link":"#runwith","children":[]},{"level":2,"title":"@ImportSelector","slug":"importselector","link":"#importselector","children":[]},{"level":2,"title":"@ImportBeanDefinitionRegistrar","slug":"importbeandefinitionregistrar","link":"#importbeandefinitionregistrar","children":[]},{"level":2,"title":"@Conditional","slug":"conditional","link":"#conditional","children":[]},{"level":2,"title":"@ConditionalOnBean","slug":"conditionalonbean","link":"#conditionalonbean","children":[]},{"level":2,"title":"@ConditionalOnMissingBean","slug":"conditionalonmissingbean","link":"#conditionalonmissingbean","children":[]},{"level":2,"title":"@ConditionalOnWebApplication","slug":"conditionalonwebapplication","link":"#conditionalonwebapplication","children":[]},{"level":2,"title":"@ConditionalOnNotWebApplication","slug":"conditionalonnotwebapplication","link":"#conditionalonnotwebapplication","children":[]},{"level":2,"title":"@ConditionalOnProperty","slug":"conditionalonproperty","link":"#conditionalonproperty","children":[]},{"level":2,"title":"@ConditionalOnExpression","slug":"conditionalonexpression","link":"#conditionalonexpression","children":[]},{"level":2,"title":"@ConditionalOnJava","slug":"conditionalonjava","link":"#conditionalonjava","children":[]},{"level":2,"title":"@ConditionalOnClass","slug":"conditionalonclass","link":"#conditionalonclass","children":[]},{"level":2,"title":"@ConditionalOnMisssingClass","slug":"conditionalonmisssingclass","link":"#conditionalonmisssingclass","children":[]},{"level":2,"title":"@ConditionalOnResource","slug":"conditionalonresource","link":"#conditionalonresource","children":[]},{"level":2,"title":"@ConditionalOnJndi","slug":"conditionalonjndi","link":"#conditionalonjndi","children":[]},{"level":2,"title":"@ConditionalOnCloudPlatform","slug":"conditionaloncloudplatform","link":"#conditionaloncloudplatform","children":[]},{"level":2,"title":"@ConditionalOnSingleCandidate","slug":"conditionalonsinglecandidate","link":"#conditionalonsinglecandidate","children":[]}],"git":{"createdTime":1709384965000,"updatedTime":1709384965000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":1}]},"readingTime":{"minutes":18.84,"words":5653},"filePathRelative":"Use/Java/SpringBoot/Annotation.md","localizedDate":"2024年3月2日"}');export{g as comp,B as data};
