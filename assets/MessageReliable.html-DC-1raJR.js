import{_ as s,o as a,c as n,a as i}from"./app-Vg0IViah.js";const l="/notes-pages/assets/image-20210718155059371-zZNGlLnv.png",e="/notes-pages/assets/image-20210718160907166-DsGGR-vS.png",D="/notes-pages/assets/image-20210718164412450-BAlbCjuF.png",r="/notes-pages/assets/image-20210718171705383-DNGUcNFn.png",o="/notes-pages/assets/image-20210718171759179-BUh_ZL1X.png",p={},d=i('<h1 id="消息可靠性" tabindex="-1"><a class="header-anchor" href="#消息可靠性"><span>消息可靠性</span></a></h1><p>消息从发送，到消费者接收，会经理多个过程：</p><figure><img src="'+l+'" alt="image-20210718155059371" tabindex="0" loading="lazy"><figcaption>image-20210718155059371</figcaption></figure><p>其中的每一步都可能导致消息丢失，常见的丢失原因包括：</p><ul><li>发送时丢失： <ul><li>生产者发送的消息未送达<code>exchange</code></li><li>消息到达<code>exchange</code>后未到达<code>queue</code></li></ul></li><li><code>MQ</code>宕机，<code>queue</code>将消息丢失</li><li><code>consumer</code>接收到消息后未消费就宕机</li></ul><p>针对这些问题，<code>RabbitMQ</code>分别给出了解决方案：</p><ol><li>生产者确认机制</li><li><code>mq</code>持久化</li><li>消费者确认机制</li><li>失败重试机制</li></ol><h2 id="一、生产者消息确认" tabindex="-1"><a class="header-anchor" href="#一、生产者消息确认"><span>一、生产者消息确认</span></a></h2><p><code>RabbitMQ</code>提供了<code>publisher confirm</code>机制来避免消息发送到<code>MQ</code>过程中丢失。</p><p>== 这种机制必须给每个消息指定一个<strong>唯一ID</strong>。 ==</p><p>消息发送到<code>MQ</code>以后，会返回一个结果给发送者，表示消息是否处理成功。</p><p>返回结果有两种方式：</p><ul><li><code>publisher-confirm</code>，发送者确认 <ul><li>消息成功投递到交换机，返回<code>ack</code></li><li>消息未投递到交换机，返回<code>nack</code></li></ul></li><li><code>publisher-return</code>，发送者回执 <ul><li>消息投递到交换机了，但是没有路由到队列。返回<code>ACK</code>，及路由失败原因。</li></ul></li></ul><figure><img src="'+e+`" alt="image-20210718160907166" tabindex="0" loading="lazy"><figcaption>image-20210718160907166</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>发送消息是，必须给消息设置一个全局唯一<code>ID</code>，以区分不同消息，避免<code>ACK</code>冲突</p></div><h3 id="_1、配置" tabindex="-1"><a class="header-anchor" href="#_1、配置"><span>1、配置</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">spring</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  rabbitmq</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    publisher-confirm-type</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">correlated</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    publisher-returns</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    template</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">      mandatory</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>publish-confirm-type</code>：开启<code>publisher-confirm</code>，这里支持两种类型： <ul><li><code>simple</code>：同步等待<code>confirm</code>结果，直到超时</li><li><code>correlated</code>：异步回调，定义<code>ConfirmCallback</code>，<code>MQ</code>返回结果时会回调这个<code>ConfirmCallback</code></li></ul></li><li><code>publish-returns</code>：开启<code>publish-return</code>功能，同样是基于<code>callback</code>机制，不过是定义<code>ReturnCallback</code></li><li><code>template.mandatory</code>：定义消息路由失败时的策略。 <ul><li><code>true</code>，则调用<code>ReturnCallback</code>；</li><li><code>false</code>：则直接丢弃消息</li></ul></li></ul><h3 id="_2、定义return回调" tabindex="-1"><a class="header-anchor" href="#_2、定义return回调"><span>2、定义Return回调</span></a></h3><p>每个<code>RabbitTemplate</code>只能配置一个<code>ReturnCallback</code>，因此需要在项目加载时配置</p><p>修改<code>publisher</code>服务</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Slf4j</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CommonConfig</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ApplicationContextAware</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> setApplicationContext</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ApplicationContext</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> applicationContext</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">throws</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> BeansException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 获取RabbitTemplate</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        RabbitTemplate</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> rabbitTemplate</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">applicationContext</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getBean</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RabbitTemplate</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 设置ReturnCallback</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        rabbitTemplate</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">setReturnCallback</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">((message, replyCode, replyText, exchange, routingKey) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // 投递失败，记录日志</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">            log</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">info</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;消息发送失败，应答码{}，原因{}，交换机{}，路由键{},消息{}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                     replyCode, replyText, exchange, routingKey, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">message</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">toString</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // 如果有业务需要，可以重发消息</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        });</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、定义confirmcallback" tabindex="-1"><a class="header-anchor" href="#_3、定义confirmcallback"><span>3、定义ConfirmCallback</span></a></h3><p><code>ConfirmCallback</code>可以在发送消息时指定，因为每个业务处理<code>confirm</code>成功或失败的逻辑不一定相同</p><p><strong>发送端</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> testSendMessage2SimpleQueue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 1.消息体</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> message</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello, spring amqp!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 2.全局唯一的消息ID，需要封装到CorrelationData中</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    CorrelationData</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> correlationData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> CorrelationData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">UUID</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">randomUUID</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">().</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">toString</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 3.添加callback</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    correlationData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">().</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">addCallback</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        result </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">result</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">isAck</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()){</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                // 3.1.ack，消息成功</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">                log</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">debug</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;消息发送成功, ID:{}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">correlationData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getId</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                // 3.2.nack，消息失败</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">                log</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">error</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;消息发送失败, ID:{}, 原因{}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">correlationData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getId</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(), </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">result</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getReason</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        },</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        ex </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> log</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">error</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;消息发送异常, ID:{}, 原因{}&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">correlationData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getId</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(),</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ex</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getMessage</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    );</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.发送消息</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    rabbitTemplate</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">convertAndSend</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;task.direct&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;task&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, message, correlationData);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 休眠一会儿，等待ack回执</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    Thread</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">sleep</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2000</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、持久化" tabindex="-1"><a class="header-anchor" href="#二、持久化"><span>二、持久化</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>默认情况下，由<code>SpringAMQP</code>声明的交换机、队列、消息都是持久化的</p><p>但<code>RabbitMQ</code>中默认是非持久化的，<code>mq</code>重启后就丢失</p></div><p>持久化的都会带上<code>D</code>的标示</p><figure><img src="`+D+`" alt="image-20210718164412450" tabindex="0" loading="lazy"><figcaption>image-20210718164412450</figcaption></figure><p>生产者确认可以确保消息投递到<code>RabbitMQ</code>的队列中，但是消息发送到<code>RabbitMQ</code>以后，如果突然宕机，也可能导致消息丢失。</p><p>要想确保消息在<code>RabbitMQ</code>中安全保存，必须开启消息持久化机制。</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><h3 id="_1、队列持久化" tabindex="-1"><a class="header-anchor" href="#_1、队列持久化"><span>1、队列持久化</span></a></h3><p><strong>接收端</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Queue</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> simpleQueue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 使用QueueBuilder构建队列，durable就是持久化的</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> QueueBuilder</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">durable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;simple.queue&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">).</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">build</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、交换机持久化" tabindex="-1"><a class="header-anchor" href="#_2、交换机持久化"><span>2、交换机持久化</span></a></h3><p><strong>接收端</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> DirectExchange</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> simpleExchange</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> DirectExchange</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;simple.direct&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#569CD6;--shiki-dark:#569CD6;">false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、消息持久化" tabindex="-1"><a class="header-anchor" href="#_3、消息持久化"><span>3、消息持久化</span></a></h3><p>利用<code>SpringAMQP</code>发送消息时，可以设置消息的属性（MessageProperties），指定<code>delivery-mode</code></p><p><strong>发送端</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> testDurableMessage</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 构建消息</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    Message</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> message</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">MessageBuilder</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">withBody</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello, ttl queue&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getBytes</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">StandardCharsets</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">UTF_8</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">setDeliveryMode</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">MessageDeliveryMode</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">PERSISTENT</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">build</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 消息ID封装到 CorrelationData</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    CorrelationData</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> data</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> CorrelationData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">UUID</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">randomUUID</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">toString</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 发送消息</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    rabbitTemplate</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">convertAndSend</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;simple.queue&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, message, data);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、消费者消息确认" tabindex="-1"><a class="header-anchor" href="#三、消费者消息确认"><span>三、消费者消息确认</span></a></h2><p><code>RabbitMQ</code>是<strong>阅后即焚</strong>机制，<code>RabbitMQ</code>确认消息被消费者消费后会立刻删除</p><p>而<code>RabbitMQ</code>是通过消费者回执来确认消费者是否成功处理消息的：消费者获取消息后，应该向<code>RabbitMQ</code>发送<code>ACK</code>回执，表明自己已经处理消息</p><p>设想这样的场景：</p><ul><li>1）<code>RabbitMQ</code>投递消息给消费者</li><li>2）消费者获取消息后，返回<code>ACK</code>给<code>RabbitMQ</code></li><li>3）<code>RabbitMQ</code>删除消息</li><li>4）消费者宕机，消息尚未处理</li></ul><p>这样，消息就丢失了。因此消费者返回<code>ACK</code>的时机非常重要。</p><p>而<code>SpringAMQP</code>则允许配置三种确认模式：</p><p>•<code>manual</code>：手动<code>ack</code>，需要在业务代码结束后，调用<code>api</code>发送<code>ack</code>。</p><p>•<code>auto</code>：自动<code>ack</code>，由<code>spring</code>监测<code>listener</code>代码是否出现异常，没有异常则返回<code>ack</code>；抛出异常则返回<code>nack</code></p><p>•<code>none</code>：关闭<code>ack</code>，<code>MQ</code>假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p><p>由此可知：</p><ul><li><code>none</code>模式下，消息投递是不可靠的，可能丢失</li><li><code>auto</code>模式类似事务机制，出现异常时返回<code>nack</code>，消息回滚到<code>mq</code>；没有异常，返回<code>ack</code></li><li><code>manual</code>：自己根据业务情况，判断什么时候该<code>ack</code></li></ul><p>一般，我们都是使用默认的<code>auto</code>即可。</p><h3 id="_1、配置none模式" tabindex="-1"><a class="header-anchor" href="#_1、配置none模式"><span>1、配置none模式</span></a></h3><p><strong>消费端</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">spring</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  rabbitmq</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    listener</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">      simple</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        acknowledge-mode</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">none</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 关闭ack</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RabbitListener</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(queues = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;simple.queue&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> listenSimpleQueue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> msg) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    log</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">info</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;消费者接收到simple.queue的消息：【{}】&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, msg);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 模拟异常</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    log</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">debug</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;消息处理完成！&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试可以发现，当消息处理抛异常时，消息依然被<code>RabbitMQ</code>删除了。</p><h3 id="_2、配置auto模式" tabindex="-1"><a class="header-anchor" href="#_2、配置auto模式"><span>2、配置auto模式</span></a></h3><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">spring</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  rabbitmq</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    listener</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">      simple</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        acknowledge-mode</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">auto</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 自动ack</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为unack（未确定状态）：</p><figure><img src="`+r+'" alt="image-20210718171705383" tabindex="0" loading="lazy"><figcaption>image-20210718171705383</figcaption></figure><p>抛出异常后，因为<code>Spring</code>会自动返回<code>nack</code>，所以消息恢复至<code>Ready</code>状态，并且没有被<code>RabbitMQ</code>删除：</p><figure><img src="'+o+`" alt="image-20210718171759179" tabindex="0" loading="lazy"><figcaption>image-20210718171759179</figcaption></figure><h2 id="四、消费失败重试机制" tabindex="-1"><a class="header-anchor" href="#四、消费失败重试机制"><span>四、消费失败重试机制</span></a></h2><p>当消费者出现异常后，消息会不断<code>requeue</code>（重入队）到队列，再重新发送给消费者，然后再次异常，再次<code>requeue</code>，无限循环，导致<code>mq</code>的消息处理飙升，带来不必要的压力：</p><p>我们可以利用<code>Spring</code>的<code>retry</code>机制，在消费者出现异常时利用本地重试，而不是无限制的<code>requeue</code>到<code>mq</code>队列。</p><h3 id="_1、本地重试" tabindex="-1"><a class="header-anchor" href="#_1、本地重试"><span>1、本地重试</span></a></h3><p><strong>消费端</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">spring</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  rabbitmq</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    listener</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">      simple</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        retry</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          enabled</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 开启消费者失败重试</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          initial-interval</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1000</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 初始的失败等待时长为1秒</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          multiplier</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          max-attempts</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">3</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 最大重试次数</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          stateless</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # true无状态；false有状态。如果业务中包含事务，这里改为false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>开启本地重试时，消息处理过程中抛出异常，不会<code>requeue</code>到队列，而是在消费者本地重试</li><li>重试达到最大次数后，<code>Spring</code>会返回<code>ack</code>，消息会被丢弃</li></ul></div><h3 id="_2、失败策略" tabindex="-1"><a class="header-anchor" href="#_2、失败策略"><span>2、失败策略</span></a></h3><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有<code>MessageRecovery</code>接口来处理，它包含三种不同的实现：</p><ul><li><p><code>RejectAndDontRequeueRecoverer</code>：重试耗尽后，直接<code>reject</code>，丢弃消息。默认就是这种方式</p></li><li><p><code>ImmediateRequeueMessageRecoverer</code>：重试耗尽后，返回<code>nack</code>，消息重新入队</p></li><li><p><code>RepublishMessageRecoverer</code>：重试耗尽后，将失败消息投递到指定的交换机</p></li></ul><p>比较优雅的一种处理方案是<code>RepublishMessageRecoverer</code>，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><p><strong>消费端</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ErrorMessageConfig</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 定义处理失败消息的交换机和队列</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> DirectExchange</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> errorMessageExchange</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> DirectExchange</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;error.direct&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Queue</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> errorQueue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Queue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;error.queue&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Binding</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> errorBinding</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Queue</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> errorQueue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">DirectExchange</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> errorMessageExchange</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> BindingBuilder</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">bind</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(errorQueue).</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">to</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(errorMessageExchange).</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">with</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;error&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 关联队列和交换机</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    @</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MessageRecoverer</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> republishMessageRecoverer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RabbitTemplate</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> rabbitTemplate</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> RepublishMessageRecoverer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(rabbitTemplate, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;error.direct&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;error&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,80),c=[d];function k(t,C){return a(),n("div",null,c)}const y=s(p,[["render",k],["__file","MessageReliable.html.vue"]]),u=JSON.parse('{"path":"/Use/Java/RabbitMQ/MessageReliable.html","title":"消息可靠性","lang":"zh-CN","frontmatter":{"category":"使用篇"},"headers":[{"level":2,"title":"一、生产者消息确认","slug":"一、生产者消息确认","link":"#一、生产者消息确认","children":[{"level":3,"title":"1、配置","slug":"_1、配置","link":"#_1、配置","children":[]},{"level":3,"title":"2、定义Return回调","slug":"_2、定义return回调","link":"#_2、定义return回调","children":[]},{"level":3,"title":"3、定义ConfirmCallback","slug":"_3、定义confirmcallback","link":"#_3、定义confirmcallback","children":[]}]},{"level":2,"title":"二、持久化","slug":"二、持久化","link":"#二、持久化","children":[{"level":3,"title":"1、队列持久化","slug":"_1、队列持久化","link":"#_1、队列持久化","children":[]},{"level":3,"title":"2、交换机持久化","slug":"_2、交换机持久化","link":"#_2、交换机持久化","children":[]},{"level":3,"title":"3、消息持久化","slug":"_3、消息持久化","link":"#_3、消息持久化","children":[]}]},{"level":2,"title":"三、消费者消息确认","slug":"三、消费者消息确认","link":"#三、消费者消息确认","children":[{"level":3,"title":"1、配置none模式","slug":"_1、配置none模式","link":"#_1、配置none模式","children":[]},{"level":3,"title":"2、配置auto模式","slug":"_2、配置auto模式","link":"#_2、配置auto模式","children":[]}]},{"level":2,"title":"四、消费失败重试机制","slug":"四、消费失败重试机制","link":"#四、消费失败重试机制","children":[{"level":3,"title":"1、本地重试","slug":"_1、本地重试","link":"#_1、本地重试","children":[]},{"level":3,"title":"2、失败策略","slug":"_2、失败策略","link":"#_2、失败策略","children":[]}]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":6.74,"words":2023},"filePathRelative":"Use/Java/RabbitMQ/MessageReliable.md","localizedDate":"2024年2月19日"}');export{y as comp,u as data};
