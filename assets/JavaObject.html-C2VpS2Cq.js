import{_ as s,o as a,c as n,a as i}from"./app-Vg0IViah.js";const e={},l=i(`<h1 id="java面向对象语法" tabindex="-1"><a class="header-anchor" href="#java面向对象语法"><span>Java面向对象语法</span></a></h1><h2 id="一、基础语法" tabindex="-1"><a class="header-anchor" href="#一、基础语法"><span>一、基础语法</span></a></h2><h3 id="成员变量和局部变量区别" tabindex="-1"><a class="header-anchor" href="#成员变量和局部变量区别"><span>成员变量和局部变量区别</span></a></h3><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>方法外</td><td>方法中</td></tr><tr><td>初始化值不同</td><td>有默认初始化值</td><td>没有，使用之前需要完成赋值</td></tr><tr><td>内存位置不同</td><td>堆内存</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>随着对象的创建而存在，随着对象的消失而消失</td><td>随着方法的调用而存在，随着方法的运行结束而消失</td></tr><tr><td>作用域</td><td>在自己所归属的大括号中</td><td>在自己所归属的大括号中</td></tr></tbody></table><h3 id="权限修饰符" tabindex="-1"><a class="header-anchor" href="#权限修饰符"><span>权限修饰符</span></a></h3><ul><li><code>private</code>：私有的、只能被定义该变量或方法的类内部访问</li><li><code>defalut</code>：默认的、如果没有指定访问修饰符，则被默认为包级私有，在同一个包内可以访问</li><li><code>protected</code>：受保护的、只允许定义该变量或方法的类及其子类和同一包中的类访问</li><li><code>public</code>：公共的、可以被任意类访问</li></ul><table><thead><tr><th style="text-align:center;">权限修饰符</th><th style="text-align:center;">同一个类中</th><th style="text-align:center;">同一个包中</th><th style="text-align:center;">不同包的子类</th><th style="text-align:center;">不同包的无关类</th></tr></thead><tbody><tr><td style="text-align:center;">private</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">default</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">protected</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">public</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr></tbody></table><h2 id="二、string" tabindex="-1"><a class="header-anchor" href="#二、string"><span>二、String</span></a></h2><h3 id="string-pool、intern" tabindex="-1"><a class="header-anchor" href="#string-pool、intern"><span>String Pool、intern()</span></a></h3><p>字符串常量池（String Pool）保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定。不仅如此，还可以使用 <code>String</code> 的 <code>intern()</code> 方法在运行过程将字符串添加到 <code>String Pool</code> 中。</p><p>当一个字符串调用 <code>intern()</code> 方法时，如果 <code>String Pool</code> 中已经存在一个字符串和该字符串值相等（使用 <code>equals()</code> 方法进行确定），那么就会返回 <code>String Pool</code> 中字符串的引用；否则，就会在 <code>String Pool</code> 中添加一个新的字符串，并返回这个新字符串的引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> s1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;aaa&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> s2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;aaa&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s1 == s2);           </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// false</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> s3</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">intern</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> s4</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">intern</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s3 == s4);           </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 如果是采用 &quot;bbb&quot; 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> s5</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;bbb&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> s6</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;bbb&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s5 == s6);  </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>s1 和 s2 采用 <code>new String()</code> 的方式新建了两个不同字符串，而 s3 和 s4 是通过 <code>s1.intern()</code> 和 <code>s2.intern()</code> 方法取得同一个字符串引用。<code>intern()</code> 首先把 &quot;aaa&quot; 放到 <code>String Pool</code> 中，然后返回这个字符串引用，因此 s3 和 s4 引用的是同一个字符串</p><h3 id="string常用方法" tabindex="-1"><a class="header-anchor" href="#string常用方法"><span>String常用方法</span></a></h3><p><code>toString()</code>：返回字符串本身，返回值为 <strong>String</strong> 类型</p><p><code>length()</code> ：返回字符串字符序列的长度（空格也算），返回值为 <strong>int</strong> 类型</p><p><code>getBytes()</code> ：将当前字符串内容转换为 <code>byte</code> 数组并返回，返回值为 <strong>byte[]</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> str</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;Hello World&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">byte</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">bytes</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">str</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getBytes</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">bytes</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">	System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;下标为&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + i + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;的元素为：&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + bytes[i]);</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//打印的是每个字母对应的ASCII码</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>toCharArray()</code> ：将当前字符串内容转换为 char 数组并返回，返回值为 <strong>char[]</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> str</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;Hello World&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">char</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">cArr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">str</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">toCharArray</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">str</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;下标为&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + i + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;的元素为：&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + cArr[i]);</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//打印的是每个字母</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>charAt(int index)</code> ：用于返回字符串指定位置的字符，返回值为 <strong>char</strong> 类型，参数为 <strong>int</strong> 类型</p><p><code>compareTo(String anotherString)</code>：比较调用对象和参数对象的大小关系，返回值为 <strong>int</strong> 类型，<code>a=b</code>，返回 0；<code>a&gt;b</code>，则返回正整数；<code>a&lt;b</code>，则返回负整数。</p><p><code>contains(CharSequence s)</code>：判断当前字符串是否包含参数指定的内容，返回值为 <strong>boolean</strong> 类型</p><p><code>trim()</code>：去掉前导和尾随空白的字符串，返回值为 <strong>String</strong> 类型</p><p><code>toUpperCase()</code> ：返回字符串的大写形式，返回值为 <strong>String</strong> 类型</p><p><code>toLowerCase()</code> ：返回字符串的小写形式，返回值为 <strong>String</strong> 类型</p><p><code>substring(int beginIndex, int endIndex)</code> ：返回字符串中从下标 beginIndex 开始到 endIndex 结束的子字符串，返回值为 <strong>String</strong> 类型，参数为 <strong>int</strong> 类型</p><p><code>substring(int beginIndex)</code> ：返回字符串中从下标 beginIndex开始到字符串结尾的子字符串，返回值为 <strong>String</strong> 类型，参数为 <strong>int</strong> 类型</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>substring 包左不包右</p></div><p><code>replace(char oldChar, char newChar)</code> ：使用参数newChar替换此字符串中出现的所有参数oldChar，返回值为 <strong>String</strong> 类型，参数为 <code>char</code> 类型</p><p><code>replace(CharSequence target, CharSequence replacement)</code> ：用新字符串replacement替换所有的旧字符串target，返回值为 <strong>String</strong> 类型</p><p><code>split(String regex)</code> ：参数regex为正则表达式，以regex所表示的字符串为分隔符，将字符串拆分成字符串数组，结尾的空字符串不包含在结果数组中，返回值为 <strong>String[]</strong> 类型，参数为 <strong>String</strong> 类型</p><p><code>startsWith(String prefix)</code> ：判断字符串是否以参数字符串开头，返回值为 <strong>boolean</strong> 类型，参数为 <strong>String</strong> 类型</p><p><code>startsWith(String prefix, int toffset)</code> ：从指定位置开始是否以参数字符串开头，返回值为 <strong>boolean</strong> 类型，参数 prefix 为 <strong>String</strong> 类型，toffset 为 <strong>int</strong> 类型</p><p><code>endsWith(String suffix)</code> 方法：判断字符串是否以参数字符串结尾，返回值为 <strong>boolean</strong> 类型，参数为 <strong>String</strong> 类型</p><p><code>indexOf(int ch)</code>：用于返回当前字符串中参数 ch 指定的字符第一次出现的下标</p><p><code>indexOf(int ch, int fromIndex)</code>：用于从 fromIndex(包含) 位置开始查找ch指定的字符</p><p><code>indexOf(String str)</code>：在字符串中检索 str 返回其第一次出现的位置，若找不到返回-1</p><p><code>indexOf(String str, int fromIndex)</code>：表示从字符串的 fromIndex(包含) 位置开始检索str第一次出现的位置</p><p><code>lastIndexOf(int ch)</code>：用于返回参数 ch 指定的字符最后一次出现的下标</p><p><code>lastIndexOf(int ch, int fromIndex)</code>：用于从 fromIndex(包含) 位置开始反向查找 ch 指定字符出现的下标，若找不到返回-1</p><p><code>lastIndexOf(String str)</code>：返回 str 指定字符串最后一次出现的下标</p><p><code>lastIndexOf(String str, int fromIndex)</code>：用于从 fromIndex(包含) 位置开始反向搜索的第一次出现的下标</p><h2 id="三、包装类" tabindex="-1"><a class="header-anchor" href="#三、包装类"><span>三、包装类</span></a></h2><p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成</p><table><thead><tr><th style="text-align:center;">基本类型</th><th style="text-align:center;">包装类型</th></tr></thead><tbody><tr><td style="text-align:center;">byte</td><td style="text-align:center;">Byte</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">Short</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">Integer</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">Long</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">Float</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">Double</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">Character</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">Boolean</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> x</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;     </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 装箱 调用了 Integer.valueOf(2)</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> y</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = x;         </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 拆箱 调用了 X.intValue()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>装箱调用 <code>valueOf</code> 方法</p><p>拆箱调用 <code>xxValue</code> 方法</p></div><h3 id="缓存池" tabindex="-1"><a class="header-anchor" href="#缓存池"><span>缓存池</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>基本类型对应的缓冲池如下</p><ul><li><code>boolean</code>：<code>true</code> 或 <code>false</code></li><li><code>byte</code>：全部</li><li><code>short</code>：<code>-128 ~ 127</code> 之间</li><li><code>int</code>：<code>-128 ~ 127</code> 之间</li><li><code>char</code>：<code>\\u0000</code> ~ <code>\\u007F</code> 范围</li></ul></div><p><code>new Integer(123)</code> 与 <code>Integer.valueOf(123)</code> 的区别在于：</p><ul><li><code>new Integer(123)</code> 每次都会新建一个对象；</li><li><code>Integer.valueOf(123)</code> 会使用缓存池中的对象，多次调用会取得同一个对象的引用。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> x</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> y</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(x == y);    </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// false</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> z</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">valueOf</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> k</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">valueOf</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(z == k);   </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>valueOf()</code> 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Integer</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> valueOf</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> i) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (i &gt;= </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">IntegerCache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">low</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> &amp;&amp; i &lt;= </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">IntegerCache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">high</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> IntegerCache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">cache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[i + (-</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">IntegerCache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">low</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)];</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(i);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Java 8</code> 中，<code>Integer</code> 缓存池的大小默认为 <code>-128~127</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> low</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = -</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">128</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> high</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> cache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // high value may be configured by property</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> h</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">127</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> integerCacheHighPropValue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        sun</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">misc</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">VM</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getSavedProperty</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;java.lang.Integer.IntegerCache.high&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (integerCacheHighPropValue != </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        try</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">parseInt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(integerCacheHighPropValue);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            i = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Math</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">max</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(i, </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">127</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // Maximum array size is Integer.MAX_VALUE</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            h = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Math</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">min</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(i, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">MAX_VALUE</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - (-low) -</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">catch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">( </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">NumberFormatException</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> nfe</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // If the property cannot be parsed into an int, ignore it.</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    high = h;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    cache = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[(high - low) + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = low;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> k</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; k &lt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">cache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; k++)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        cache[k] = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Integer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(j++);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // range [-128, 127] must be interned (JLS7 5.1.7)</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    assert</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> IntegerCache</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">high</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> &gt;= </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">127</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会在自动装箱过程调用 <code>valueOf()</code> 方法，因此多个值相同且值在缓存池范围内的 <code>Integer</code> 实例使用自动装箱来创建，那么就会引用相同的对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> m</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Integer</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> n</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(m == n); </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>Integer</code> 的缓冲池上界是可调的，在启动 <code>jvm</code> 的时候，通过 <code>-XX:AutoBoxCacheMax=&lt;size&gt;</code> 来指定这个缓冲池的大小，该选项在 <code>JVM</code> 初始化的时候会设定一个名为 <code>java.lang.IntegerCache.high</code> 系统属性，然后 <code>IntegerCache</code> 初始化的时候就会读取该系统属性来决定上界</p></div>`,60),r=[l];function t(D,o){return a(),n("div",null,r)}const d=s(e,[["render",t],["__file","JavaObject.html.vue"]]),c=JSON.parse('{"path":"/Grammar/Java/Java/JavaObject.html","title":"Java面向对象语法","lang":"zh-CN","frontmatter":{"category":"语法"},"headers":[{"level":2,"title":"一、基础语法","slug":"一、基础语法","link":"#一、基础语法","children":[{"level":3,"title":"成员变量和局部变量区别","slug":"成员变量和局部变量区别","link":"#成员变量和局部变量区别","children":[]},{"level":3,"title":"权限修饰符","slug":"权限修饰符","link":"#权限修饰符","children":[]}]},{"level":2,"title":"二、String","slug":"二、string","link":"#二、string","children":[{"level":3,"title":"String Pool、intern()","slug":"string-pool、intern","link":"#string-pool、intern","children":[]},{"level":3,"title":"String常用方法","slug":"string常用方法","link":"#string常用方法","children":[]}]},{"level":2,"title":"三、包装类","slug":"三、包装类","link":"#三、包装类","children":[{"level":3,"title":"缓存池","slug":"缓存池","link":"#缓存池","children":[]}]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":6.74,"words":2022},"filePathRelative":"Grammar/Java/Java/JavaObject.md","localizedDate":"2024年2月19日"}');export{d as comp,c as data};
