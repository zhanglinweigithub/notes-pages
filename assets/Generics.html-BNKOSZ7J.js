import{_ as s,o as a,c as n,a as i}from"./app-Vg0IViah.js";const l={},e=i(`<h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h1><p><code>JDK5</code>引入的, 可以在编译阶段约束操作的数据类型, 并进行检查</p><p>**好处：**统一数据类型将运行期的错误提升到了编译期</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>泛型中只能编写引用数据类型</p></div><h2 id="一、泛型类" tabindex="-1"><a class="header-anchor" href="#一、泛型类"><span>一、泛型类</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// &lt;&gt; 内就是泛型</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">E</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> add</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">E</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、泛型方法" tabindex="-1"><a class="header-anchor" href="#二、泛型方法"><span>二、泛型方法</span></a></h2><ul><li>静态：需要声明出自己独立的泛型</li><li>非静态方法：泛型是根据类的泛型去匹配的</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 非静态方法</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">E</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> add</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">E</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 静态方法</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;T&gt; </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> printArray</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">T</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] array){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、泛型接口" tabindex="-1"><a class="header-anchor" href="#三、泛型接口"><span>三、泛型接口</span></a></h2><p>类实现接口的时候，如果接口带有泛型，有两种操作方式</p><ul><li>类实现接口的时候，直接确定类型</li><li>延续接口的泛型，等创建对象的时候再确定</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> interface</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Collection</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">E</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> interface</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">E</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ArrayList</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">E</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、泛型通配符" tabindex="-1"><a class="header-anchor" href="#四、泛型通配符"><span>四、泛型通配符</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  (任意类型)</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> extends </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">E</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (只能接收 E 或者是 E 的子类)</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">?</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> super</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> E</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (只能接收 E 或者是 E 的父类)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),r=[e];function p(D,d){return a(),n("div",null,r)}const o=s(l,[["render",p],["__file","Generics.html.vue"]]),t=JSON.parse('{"path":"/Grammar/Java/Java/Generics.html","title":"泛型","lang":"zh-CN","frontmatter":{"category":"语法"},"headers":[{"level":2,"title":"一、泛型类","slug":"一、泛型类","link":"#一、泛型类","children":[]},{"level":2,"title":"二、泛型方法","slug":"二、泛型方法","link":"#二、泛型方法","children":[]},{"level":2,"title":"三、泛型接口","slug":"三、泛型接口","link":"#三、泛型接口","children":[]},{"level":2,"title":"四、泛型通配符","slug":"四、泛型通配符","link":"#四、泛型通配符","children":[]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":0.88,"words":263},"filePathRelative":"Grammar/Java/Java/Generics.md","localizedDate":"2024年2月19日"}');export{o as comp,t as data};
