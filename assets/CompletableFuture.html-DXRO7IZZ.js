import{_ as s,o as a,c as l,a as n}from"./app-Vg0IViah.js";const D="/notes-pages/assets/image-20230428191001079-COX0SrCg.png",i={},e=n(`<h1 id="completablefuture" tabindex="-1"><a class="header-anchor" href="#completablefuture"><span>CompletableFuture</span></a></h1><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">T</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#569CD6;--shiki-dark:#569CD6;">implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">T</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt;, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletionStage</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">T</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+D+`" alt="image-20230428191001079" tabindex="0" loading="lazy"><figcaption>image-20230428191001079</figcaption></figure><p><code>CompletableFuture</code> 的函数式能力是<code>CompletionStage</code>这个接口赋予的</p><p><code>Future</code> 接口有 5 个方法：</p><ul><li><code>boolean cancel(boolean mayInterruptIfRunning)</code> ：尝试取消执行任务。</li><li><code>boolean isCancelled()</code> ：判断任务是否被取消。</li><li><code>boolean isDone()</code> ： 判断任务是否已经被执行完成。</li><li><code>get()</code> ：等待任务执行完成并获取运算结果。</li><li><code>get(long timeout, TimeUnit unit)</code> ：多了一个超时时间。</li></ul><h2 id="一、创建completablefuture" tabindex="-1"><a class="header-anchor" href="#一、创建completablefuture"><span>一、创建CompletableFuture</span></a></h2><ol><li>通过 <code>new</code> 关键字。</li><li>基于 <code>CompletableFuture</code> 自带的静态工厂方法：<code>runAsync()</code> 、<code>supplyAsync()</code></li></ol><h3 id="_1、静态工厂方法" tabindex="-1"><a class="header-anchor" href="#_1、静态工厂方法"><span>1、静态工厂方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> &lt;U&gt; </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;U&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Supplier</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;U&gt; supplier);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 使用自定义线程池(推荐)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> &lt;U&gt; </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;U&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Supplier</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;U&gt; supplier, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Executor</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> executor);</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;Void&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">runAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> runnable);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 使用自定义线程池(推荐)</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;Void&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">runAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> runnable, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Executor</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> executor);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>runAsync()</code> 方法，不允许返回值。当你需要异步操作且不关心返回结果的时候可以使用 <code>runAsync()</code> 方法。</li><li><code>supplyAsync()</code> 方法，允许返回值，<code>U</code> 是返回结果值的类型。当你需要异步操作且关心返回结果的时候,可以使用 <code>supplyAsync()</code> 方法</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Void</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">runAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    () </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 输出 &quot;hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    () </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;hello!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、new方法" tabindex="-1"><a class="header-anchor" href="#_2、new方法"><span>2、new方法</span></a></h3><p>通过 <code>new</code> 关键字创建 <code>CompletableFuture</code> 对象这种使用方式可以看作是将 <code>CompletableFuture</code> 当做 <code>Future</code> 来使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RpcResponse</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Object</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt;&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">resultFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// complete() 方法只能调用一次，后续调用将被忽略。</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">resultFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">complete</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(rpcResponse);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 获取结果</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">rpcResponse = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">completableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用 <code>complete()</code> 方法为其传入结果，这表示 <code>resultFuture</code> 已经被完成了</li><li>调用 <code>get()</code> 方法获取计算结果，调用 <code>get()</code> 方法的线程会阻塞直到 <code>CompletableFuture</code> 完成运算</li></ul><p>如果已经知道计算的结果的话，可以使用静态方法 <code>completedFuture()</code> 来创建 <code>CompletableFuture</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">completedFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、处理异步结算的结果" tabindex="-1"><a class="header-anchor" href="#二、处理异步结算的结果"><span>二、处理异步结算的结果</span></a></h2><p>我们获取到异步计算的结果之后，还可以对其进行进一步的处理，比较常用的方法有下面几个：</p><ul><li><code>thenApply()</code></li><li><code>thenAccept()</code></li><li><code>thenRun()</code></li><li><code>whenComplete()</code></li></ul><h3 id="_1、thenapply" tabindex="-1"><a class="header-anchor" href="#_1、thenapply"><span>1、thenApply()</span></a></h3><p><code>thenApply()</code> 方法接受一个 <code>Function</code> 实例，用它来处理结果</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">completedFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 这次调用将被忽略。</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;nice!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以进行 <strong>流式调用</strong> ：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">completedFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">).</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;nice!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!world!nice!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、thenaccept-、thenrun" tabindex="-1"><a class="header-anchor" href="#_2、thenaccept-、thenrun"><span>2、thenAccept()、thenRun()</span></a></h3><p>如果不需要从回调函数中获取返回结果，可以使用 <code>thenAccept()</code> 或者 <code>thenRun()</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">completedFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    	.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;nice!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    	.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenAccept</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#C586C0;--shiki-dark:#C586C0;">::</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">println); </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// hello!world!nice!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">completedFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    	.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenApply</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;nice!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    	.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenRun</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)); </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// hello!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">区别</p><p><code>thenRun()</code> 不能访问异步计算的结果</p></div><h3 id="_3、whencomplete" tabindex="-1"><a class="header-anchor" href="#_3、whencomplete"><span>3、whenComplete()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">whenComplete</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">((res, ex) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">            System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(res);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // 这里没有抛出异常所以为 null</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">            assertNull</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(ex);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        });</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>res</code> 代表返回的结果</li><li><code>ex</code> 的类型为 <code>Throwable</code> ，代表抛出的异常</li></ul><h2 id="三、异常处理" tabindex="-1"><a class="header-anchor" href="#三、异常处理"><span>三、异常处理</span></a></h2><ul><li><code>handle()</code></li><li><code>exceptionally()</code></li><li><code>completeExceptionally()</code></li></ul><h3 id="_1、handle" tabindex="-1"><a class="header-anchor" href="#_1、handle"><span>1、handle()</span></a></h3><p>通过 <code>handle()</code> 方法来处理任务执行过程中可能出现的抛出异常的情况</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        throw</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> RuntimeException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;Computation error!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}).</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">handle</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">((res, ex) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> res != </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> ?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> res </span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>res</code> 代表返回的结果</li><li><code>ex</code> 的类型为 <code>Throwable</code> ，代表抛出的异常</li></ul><h3 id="_2、exceptionally" tabindex="-1"><a class="header-anchor" href="#_2、exceptionally"><span>2、exceptionally()</span></a></h3><p>通过 <code>exceptionally()</code> 方法来处理异常情况</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        throw</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> RuntimeException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;Computation error!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}).</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">exceptionally</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(ex </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ex</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">toString</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span><span style="color:#6A9955;--shiki-dark:#6A9955;">// CompletionException</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">});</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、completeexceptionally" tabindex="-1"><a class="header-anchor" href="#_3、completeexceptionally"><span>3、completeExceptionally()</span></a></h3><p>如果想让 <code>CompletableFuture</code> 的结果就是异常的话，可以使用 <code>completeExceptionally()</code> 方法为其赋值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">completableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">completableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">completeExceptionally</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">  new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> RuntimeException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;Calculation failed!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">completableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(); </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// ExecutionException</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、组合completablefuture" tabindex="-1"><a class="header-anchor" href="#四、组合completablefuture"><span>四、组合CompletableFuture</span></a></h2><ul><li><code>thenCompose()</code></li><li><code>thenCombine()</code></li></ul><h3 id="_1、thencompose" tabindex="-1"><a class="header-anchor" href="#_1、thencompose"><span>1、thenCompose()</span></a></h3><p>使用 <code>thenCompose()</code> 按顺序链接两个 <code>CompletableFuture</code> 对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenCompose</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这个方法还是非常有用的。比如说，我们先要获取用户信息然后再用用户信息去做其他事情</p></blockquote><h3 id="_2、thencombine" tabindex="-1"><a class="header-anchor" href="#_2、thencombine"><span>2、thenCombine()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">completableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;hello!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenCombine</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    		CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;world!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    		(s1, s2) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s1 + s2</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">		)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">thenCompose</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;nice!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">assertEquals</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hello!world!nice!&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">completableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">thenCompose()和 thenCombine()区别</p><ul><li><code>thenCompose()</code> 可以操作两个 <code>CompletableFuture</code> 对象，并将前一个任务的返回结果作为下一个任务的参数，它们之间存在着先后顺序。</li><li><code>thenCombine()</code> 会在两个任务都执行完成后，把两个任务的结果合并。两个任务是并行执行的，它们之间并没有先后依赖顺序。</li></ul></div><h2 id="五、并行运行多个completablefuture" tabindex="-1"><a class="header-anchor" href="#五、并行运行多个completablefuture"><span>五、并行运行多个CompletableFuture</span></a></h2><ul><li><code>allOf()</code>：会等到所有的 <code>CompletableFuture</code> 都运行完成之后再返回</li><li><code>anyOf()</code>：不会等待所有的 <code>CompletableFuture</code> 都运行完成之后再返回，只要有一个执行完成即可</li></ul><h3 id="_1、allof" tabindex="-1"><a class="header-anchor" href="#_1、allof"><span>1、allOf()</span></a></h3><p>通过 <code>CompletableFuture</code> 的 <code>allOf()</code>这个静态方法来并行运行多个 <code>CompletableFuture</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Void</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">task1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">  CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(()</span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    //自定义业务操作</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 省略 task2 ~ task5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Void</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">task6</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">  CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(()</span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    //自定义业务操作</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Void</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">headerFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">allOf</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(task1,.....,task6);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">try</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 调用 join() 可以让程序等 task1 ~ task6 都运行完了之后再继续执行</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">	headerFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">join</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">} </span><span style="color:#C586C0;--shiki-dark:#C586C0;">catch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Exception</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> ex</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">	......</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;all done. &quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、anyof" tabindex="-1"><a class="header-anchor" href="#_2、anyof"><span>2、anyOf()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Random</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> rand</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Random</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    try</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        Thread</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">sleep</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1000</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">rand</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">nextInt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1000</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">catch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">InterruptedException</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">finally</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;future1 done...&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;abc&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">future2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">supplyAsync</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(() </span><span style="color:#569CD6;--shiki-dark:#569CD6;">-&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    try</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        Thread</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">sleep</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1000</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">rand</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">nextInt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1000</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">catch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">InterruptedException</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">finally</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;future2 done...&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &quot;efg&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Object</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">f</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">CompletableFuture</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">anyOf</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(future1, future2);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">f</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 结果可能是：</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">future2 done...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">efg</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 也可能是</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">future1 done...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">abcjava</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62),p=[e];function r(o,t){return a(),l("div",null,p)}const d=s(i,[["render",r],["__file","CompletableFuture.html.vue"]]),c=JSON.parse('{"path":"/Use/Java/Concurrent/CompletableFuture.html","title":"CompletableFuture","lang":"zh-CN","frontmatter":{"category":"使用篇"},"headers":[{"level":2,"title":"一、创建CompletableFuture","slug":"一、创建completablefuture","link":"#一、创建completablefuture","children":[{"level":3,"title":"1、静态工厂方法","slug":"_1、静态工厂方法","link":"#_1、静态工厂方法","children":[]},{"level":3,"title":"2、new方法","slug":"_2、new方法","link":"#_2、new方法","children":[]}]},{"level":2,"title":"二、处理异步结算的结果","slug":"二、处理异步结算的结果","link":"#二、处理异步结算的结果","children":[{"level":3,"title":"1、thenApply()","slug":"_1、thenapply","link":"#_1、thenapply","children":[]},{"level":3,"title":"2、thenAccept()、thenRun()","slug":"_2、thenaccept-、thenrun","link":"#_2、thenaccept-、thenrun","children":[]},{"level":3,"title":"3、whenComplete()","slug":"_3、whencomplete","link":"#_3、whencomplete","children":[]}]},{"level":2,"title":"三、异常处理","slug":"三、异常处理","link":"#三、异常处理","children":[{"level":3,"title":"1、handle()","slug":"_1、handle","link":"#_1、handle","children":[]},{"level":3,"title":"2、exceptionally()","slug":"_2、exceptionally","link":"#_2、exceptionally","children":[]},{"level":3,"title":"3、completeExceptionally()","slug":"_3、completeexceptionally","link":"#_3、completeexceptionally","children":[]}]},{"level":2,"title":"四、组合CompletableFuture","slug":"四、组合completablefuture","link":"#四、组合completablefuture","children":[{"level":3,"title":"1、thenCompose()","slug":"_1、thencompose","link":"#_1、thencompose","children":[]},{"level":3,"title":"2、thenCombine()","slug":"_2、thencombine","link":"#_2、thencombine","children":[]}]},{"level":2,"title":"五、并行运行多个CompletableFuture","slug":"五、并行运行多个completablefuture","link":"#五、并行运行多个completablefuture","children":[{"level":3,"title":"1、allOf()","slug":"_1、allof","link":"#_1、allof","children":[]},{"level":3,"title":"2、anyOf()","slug":"_2、anyof","link":"#_2、anyof","children":[]}]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":4.29,"words":1286},"filePathRelative":"Use/Java/Concurrent/CompletableFuture.md","localizedDate":"2024年2月19日"}');export{d as comp,c as data};
