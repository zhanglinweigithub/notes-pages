import{_ as s,o as a,c as i,a as n}from"./app-Vg0IViah.js";const l="/notes-pages/assets/image-20230901160745250-CabSQ76R.png",e={},d=n(`<h1 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h1><p>使用关键字 <code>interface</code> 声明。接口体现的思想是对规则的声明，<code>Java</code>中的接口更多体现的是对行为的抽象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 格式：public interface 接口名 {} </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> interface</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...抽象方法</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>implements</code> 关键字来实现接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 格式：public class 类名 implements 接口名 {}</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserServiceImpl</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> implements</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> UserService</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 重写接口中的抽象方法...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接口不能实例化，因为没有构造方法</li><li>接口的子类（实现类） <ul><li>要么重写接口中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><p><strong>JDK8开始</strong></p><p>接口中可以定义有方法体的方法 ==&gt; 默认方法、静态方法。（default、static）</p><p>用于解决接口升级问题，否则所有的接口实现类都要重写新加入的方法，维护成本高</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 默认方法格式：public default 返回值类型 方法名(参数列表) {}</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> default</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> show</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 静态方法格式：public static 返回值类型 方法名(参数列表) {}</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> show</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>默认方法注意事项：</p><ul><li>默认方法不是抽象方法，所以不强制被重写 (但是可以被重写，重写的时候去掉default关键字)</li><li><code>public</code>可以省略，<code>default</code>不能省略</li><li>如果实现了多个接口，多个接口中存在相同的方法声明，子类就必须对该方法进行重写，否则无法明确调用哪个</li></ul><p>静态方法注意事项：</p><ul><li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用</li><li><code>public</code>可以省略，<code>static</code>不能省略</li></ul></div><p><strong>JDK9开始</strong></p><p>接口中可以定义私有方法（private）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 格式1：private 返回值类型 方法名(参数列表) {}</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> show</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 格式2：private static 返回值类型 方法名(参数列表) {}</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> method</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>1、接口和类的关系</strong></p><p>实现关系。接口可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p><p><strong>2、接口和接口的关系</strong></p><p>继承关系，可以单继承，也可以多继承</p><p><strong>3、类和类的关系</strong></p><p>继承关系，只能单继承，但是可以多层继承</p></div><h2 id="一、成员" tabindex="-1"><a class="header-anchor" href="#一、成员"><span>一、成员</span></a></h2><p>接口中的成员变量只能是【常量】，默认修饰符：<code>public static final</code></p><p>没有构造方法</p><p>成员方法只能是【抽象方法】，默认修饰符：<code>public abstract</code></p><h2 id="二、抽象类和接口对比" tabindex="-1"><a class="header-anchor" href="#二、抽象类和接口对比"><span>二、抽象类和接口对比</span></a></h2><table><thead><tr><th>参数</th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>声明</td><td>interface</td><td>abstract</td></tr><tr><td>实现</td><td>implements</td><td>extends</td></tr><tr><td>构造器</td><td>没有</td><td>有</td></tr><tr><td>多继承/实现</td><td>多实现</td><td>单继承</td></tr><tr><td></td><td></td><td></td></tr><tr><td>成员变量</td><td>只能定义常量</td><td>可以定义变量、也可以定义常量</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ul><li>抽象类是对事务的抽象（描述事物）</li><li>接口是对行为抽象（制定规则）</li></ul><h2 id="三、使用场景" tabindex="-1"><a class="header-anchor" href="#三、使用场景"><span>三、使用场景</span></a></h2><p>接口可以为程序制定规则, 代码更加规范</p><figure><img src="`+l+'" alt="image-20230901160745250" tabindex="0" loading="lazy"><figcaption>image-20230901160745250</figcaption></figure>',25),t=[d];function r(p,c){return a(),i("div",null,t)}const D=s(e,[["render",r],["__file","Interface.html.vue"]]),k=JSON.parse('{"path":"/Grammar/Java/Java/Interface.html","title":"接口","lang":"zh-CN","frontmatter":{"category":"语法"},"headers":[{"level":2,"title":"一、成员","slug":"一、成员","link":"#一、成员","children":[]},{"level":2,"title":"二、抽象类和接口对比","slug":"二、抽象类和接口对比","link":"#二、抽象类和接口对比","children":[]},{"level":2,"title":"三、使用场景","slug":"三、使用场景","link":"#三、使用场景","children":[]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":2.42,"words":726},"filePathRelative":"Grammar/Java/Java/Interface.md","localizedDate":"2024年2月19日"}');export{D as comp,k as data};
