import{_ as a,r as i,o as l,c as e,e as s,f as p,g as r,a as o}from"./app-Vg0IViah.js";const c={},d=s("h1",{id:"nginx配置文件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#nginx配置文件"},[s("span",null,"Nginx配置文件")])],-1),D={href:"https://blog.redis.com.cn/doc/",target:"_blank",rel:"noopener noreferrer"},t=o(`<h2 id="一、nginx-conf" tabindex="-1"><a class="header-anchor" href="#一、nginx-conf"><span>一、nginx.conf</span></a></h2><p><code>nginx.conf</code>文件是由一个一个的指令块组成的，用<code>{}</code>标识一个指令块</p><p>指令块：全局块、<code>events</code>块、<code>http</code>块、<code>server</code>块、<code>localtion</code>块、<code>upstream</code>块</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>每一个指令块中的指令必须以 <code>;</code> 号结尾</p></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>全局模块</span></span>
<span class="line"><span>event模块</span></span>
<span class="line"><span>http模块</span></span>
<span class="line"><span>    upstream模块</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    server模块</span></span>
<span class="line"><span>        localtion块</span></span>
<span class="line"><span>        localtion块</span></span>
<span class="line"><span>        ....</span></span>
<span class="line"><span>    server模块</span></span>
<span class="line"><span>        localtion块</span></span>
<span class="line"><span>        localtion块</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>    .... </span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>全局模块：</strong> 配置影响<code>nginx</code>全局的指令，比如运行<code>nginx</code>的用户名，<code>nginx</code>进程<code>pid</code>存放路径，日志存放路径，配置文件引入，<code>worker</code>进程数等。</li><li><strong>events块：</strong> 配置影响<code>nginx</code>服务器或与用户的网络连接。比如每个进程的最大连接数，选取哪种事件驱动模型（<code>select/poll epoll</code>或者是其他等等<code>nginx</code>支持的）来处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li><strong>http块：</strong> 可以嵌套多个<code>server</code>，配置代理，缓存，日志格式定义等绝大多数功能和第三方模块的配置。如文件引入，<code>mime-type</code>定义，日志自定义，是否使用<code>sendfile</code>传输文件，连接超时时间，单连接请求数等。</li><li><strong>server块：</strong> 配置虚拟主机的相关参数比如域名端口等等，一个<code>http</code>中可以有多个<code>server</code>。</li><li><strong>location块：</strong> 配置<code>url</code>路由规则</li><li><strong>upstream块：</strong> 配置上游服务器的地址以及负载均衡策略和重试策略等等</li></ol><h2 id="二、指令" tabindex="-1"><a class="header-anchor" href="#二、指令"><span>二、指令</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>有些指令是可以在不同作用域使用的，如果在多个作用域都有相同指令的使用，那么<code>nginx</code>将会遵循就近原则或者我愿称之为 <strong>内层配置优先</strong> 。</p><p>例: 在 <code>http</code>配了日志级别，也在某个<code>server</code>中配了日志级别，那么这个<code>server</code>将使用他自己配置的已不使用外层的<code>http</code>日志配置</p></div><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">#user  nobody; # 指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">worker_processes </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;"> 1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;  </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 指定工作进程的个数，默认是1个。具体可以根据服务器cpu数量进行设置， 比如cpu有4个，可以设置为4。如果不知道cpu的数量，可以设置为auto。 nginx会自动判断服务器的cpu个数，并设置相应的进程数</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">#error_log  logs/error.log;  # 用来定义全局错误日志文件输出路径，这个设置也可以放入http块，server块，日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">#error_log  logs/error.log  notice;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">#error_log  logs/error.log  info; # 指定error日志位置和日志级别</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">#pid        logs/nginx.pid;  # 用来指定进程pid的存储文件位置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">events</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    accept_mutex </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">on;   </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 设置网路连接序列化，防止惊群现象发生，默认为on</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll，其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，对于Linux系统，epoll工作模式是首选</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    use </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">epoll;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # 用于定义Nginx每个工作进程的最大连接数，默认是1024。最大客户端连接数由worker_processes和worker_connections决定，即Max_client=worker_processes*worker_connections在作为反向代理时，max_clients变为：max_clients = worker_processes *worker_connections/4。进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    worker_connections </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;"> 1024</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"># 对HTTP服务器相关属性的配置如下</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">http</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    include </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">      mime.types; </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 引入文件类型映射文件 </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    default_type </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> application/octet-stream; </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 如果没有找到指定的文件类型映射 使用默认配置 </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # 设置日志打印格式</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #access_log  logs/access.log  main; # 设置日志输出路径以及 日志级别</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    sendfile </span><span style="color:#569CD6;--shiki-dark:#569CD6;">       on</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 开启零拷贝 省去了内核到用户态的两次copy故在文件传输时性能会有很大提升</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #tcp_nopush     on; # 数据包会累计到一定大小之后才会发送，减小了额外开销，提高网络效率</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    keepalive_timeout </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;"> 65</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 设置nginx服务器与客户端会话的超时时间。超过这个时间之后服务器会关闭该连接，客户端再次发起请求，则需要再次进行三次握手。</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #gzip  on; # 开启压缩功能，减少文件传输大小，节省带宽。</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    sendfile_max_chunk </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">100k; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # 配置你的上游服务（即被nginx代理的后端服务）的ip和端口/域名</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    upstream</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> backend_server { </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        server</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> 172.30.128.65:8080;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        server</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> 172.30.128.65:8081 backup; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">#备机</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    server</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        listen </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">      80</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">#nginx服务器监听的端口</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        server_name </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> localhost; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">#监听的地址 nginx服务器域名/ip 多个使用英文逗号分割</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        #access_log  logs/host.access.log  main; # 设置日志输出路径以及 级别，会覆盖http指令块的access_log配置</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        # localtion用于定义请求匹配规则。 以下是实际使用中常见的3中配置（即分为：首页，静态，动态三种）</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">       </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        # 第一种：直接匹配网站根目录，通过域名访问网站首页比较频繁，使用这个会加速处理，一般这个规则配成网站首页，假设此时我们的网站首页文件就是： usr/local/nginx/html/index.html</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        location</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#D16969;--shiki-dark:#D16969;">/ </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{  </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">            root </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  html; </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 静态资源文件的根目录 比如我的是 /usr/local/nginx/html/</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">            index </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> index.html index.htm; </span><span style="color:#6A9955;--shiki-dark:#6A9955;"># 静态资源文件名称 比如：网站首页html文件</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        # 第二种：静态资源匹配（静态文件修改少访问频繁，可以直接放到nginx或者统一放到文件服务器，减少后端服务的压力），假设把静态文件我们这里放到了 usr/local/nginx/webroot/static/目录下</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        location</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> ^~ </span><span style="color:#D16969;--shiki-dark:#D16969;">/static/ </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">            alias </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">/webroot/static/; 访问 ip:80/static/xxx.jpg后，将会去获取/url/local/nginx/webroot/static/xxx.jpg 文件并响应</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        # 第二种的另外一种方式：拦截所有 后缀名是gif,jpg,jpeg,png,css.js,ico这些 类静态的的请求，让他们都去直接访问静态文件目录即可</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        location ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            root /webroot/static/;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        # 第三种：用来拦截非首页、非静态资源的动态数据请求，并转发到后端应用服务器 </span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        location</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> / {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">            proxy_pass </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">http://backend_server; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">#请求转向 upstream是backend_server 指令块所定义的服务器列表</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">            deny </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">192.168.3.29; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">#拒绝的ip （黑名单）</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">            allow </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">192.168.5.10; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">#允许的ip（白名单）</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        # 定义错误返回的页面，凡是状态码是 500 502 503 504 总之50开头的都会返回这个 根目录下html文件夹下的50x.html文件内容</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        error_page </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">  500</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;"> 502</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;"> 503</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;"> 504</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  /50x.html;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        location</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#D16969;--shiki-dark:#D16969;">/50x.html </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">            root </span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  html;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # 其余的server配置 ,如果有需要的话</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #server {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        ......</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #    location / {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">               ....</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #    }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    #}</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # include /etc/nginx/conf.d/*.conf;  # 一般我们实际使用中有很多配置，通常的做法并不是将其直接写到nginx.conf文件，</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    # 而是写到新文件 然后使用include指令 将其引入到nginx.conf即可，这样使得主配置nginx.conf文件更加清晰。</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function k(v,h){const n=i("ExternalLinkIcon");return l(),e("div",null,[d,s("p",null,[s("a",D,[p("Nginx中文文档"),r(n)])]),t])}const m=a(c,[["render",k],["__file","Config.html.vue"]]),y=JSON.parse('{"path":"/Use/Java/Nginx/Config.html","title":"Nginx配置文件","lang":"zh-CN","frontmatter":{"order":4,"category":"使用篇"},"headers":[{"level":2,"title":"一、nginx.conf","slug":"一、nginx-conf","link":"#一、nginx-conf","children":[]},{"level":2,"title":"二、指令","slug":"二、指令","link":"#二、指令","children":[]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":5.9,"words":1770},"filePathRelative":"Use/Java/Nginx/Config.md","localizedDate":"2024年2月19日"}');export{m as comp,y as data};
