import{_ as s,o as a,c as n,a as i}from"./app-Vg0IViah.js";const l="/notes-pages/assets/image-20230408163554243-CxUKzQjw.png",e="/notes-pages/assets/image-20230408172427553-MJcHvs1D.png",D="/notes-pages/assets/image-20230408172529037-DPsl2M2F.png",p={},o=i('<h1 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制"><span>类加载机制</span></a></h1><p>类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。</p><p>编写的 <code>Java</code> 代码需要经过编译器编译为 <code>class</code> 文件</p><p>代码编译为 <code>class</code> 文件后，需要通过类加载器把 <code>class</code> 文件加载到虚拟机中才能运行和使用</p><h2 id="一、类加载步骤" tabindex="-1"><a class="header-anchor" href="#一、类加载步骤"><span>一、类加载步骤</span></a></h2><p>类从被加载到内存到使用完成被卸载出内存，需要经历</p><p><strong>加载、验证、准备、解析、初始化、使用、卸载</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>验证、准备、解析统称为连接</p></div><figure><img src="'+l+`" alt="image-20230408163554243" tabindex="0" loading="lazy"><figcaption>image-20230408163554243</figcaption></figure><h3 id="_1、加载" tabindex="-1"><a class="header-anchor" href="#_1、加载"><span>1、加载</span></a></h3><p>在加载阶段，虚拟机主要完成三件事情</p><ul><li><p>通过一个类的全限定名来获取定义该类的二进制流；（比如 com.zhang.loadClass.test）</p></li><li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构；</p></li><li><p>在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为程序访问方法区中这个类的外部接口。</p></li></ul><p>其中二进制字节流可以从以下方式中获取：</p><ul><li>从 <code>ZIP</code> 包读取，成为 <code>JAR</code>、<code>EAR</code>、<code>WAR</code> 格式的基础。</li><li>从网络中获取，最典型的应用是 <code>Applet</code>。</li><li>运行时计算生成，例如动态代理技术，在 <code>java.lang.reflect.Proxy</code> 使用 <code>ProxyGenerator.generateProxyClass</code> 的代理类的二进制字节流。</li><li>由其他文件生成，例如由 <code>JSP</code> 文件生成对应的 <code>Class</code> 类。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>JVM在什么情况下会加载一个类？</strong> 也就是说，啥时候会从“<code>.class</code>”字节码文件中加载这个类到<code>JVM</code>内存里来</p><p>在你的代码中用到这个类的时候</p><ol><li>首先你的代码中包含“<code>main()</code>”方法的主类一定会在<code>JVM</code>进程启动之后被加载到内存，开始执行你的“<code>main()</code>”方法中的代码</li><li>接着遇到你使用了别的类，比如“<code>ReplicaManager</code>”，此时就会从对应的“<code>.class</code>”字节码文件加载对应的类到内存里来。</li></ol></div><h3 id="_2、验证" tabindex="-1"><a class="header-anchor" href="#_2、验证"><span>2、验证</span></a></h3><p>验证的目的是为了确保 <code>class</code> 文件的字节流包含的内容符合虚拟机的要求，且不会危害虚拟机的安全</p><h3 id="_3、准备" tabindex="-1"><a class="header-anchor" href="#_3、准备"><span>3、准备</span></a></h3><p>正式为【类变量】分配内存并设置类变量【初始值】，这些变量所使用的内存都分配在【方法区】</p><p>【实例变量】不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在【堆】中</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p></li><li><p>分配内存的对象是【类变量】而不是实例变量</p></li><li><p>是分配【初始值】，而不是赋值</p></li></ul></div><p>一般数值类型的初始值都为<code>0</code></p><p><code>char</code>类型的初始值 为&#39;<code>\\u0000</code>&#39;（常量池中一个表示<code>Nul</code>的字符串）</p><p><code>boolean</code>类型初始值为<code>false</code></p><p>引用类型初始值为<code>null</code>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>但是加上<code>final</code>关键字，比如下面这行代码在准备阶段会初始化<code>value</code>的值为<code>123</code>；</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> value</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的代码，类变量 <code>value</code> 被初始化为 0 而不是 123</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> value</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="_4、解析" tabindex="-1"><a class="header-anchor" href="#_4、解析"><span>4、解析</span></a></h3><p>解析是将常量池中【符号引用】替换为【直接引用】的过程。</p><h5 id="符号引用" tabindex="-1"><a class="header-anchor" href="#符号引用"><span>符号引用</span></a></h5><p>符号引用是以一组符号来描述所引用的目标</p><p>符号引用与虚拟机实现的内存布局无关，引用的目标不一定已经加载到内存中。</p><p>比如在 <code>com.danny.framework.LoggerFactory</code> 类引用了 <code>com.danny.framework.Logger</code> ，但在编译期 间是不知道 <code>Logger</code> 类的内存地址的，所以只能先用 <code>com.danny.framework.Logger</code> （假设是这个，实际上是由类似于 <code>CONSTANT_Class_info</code> 的常量来表示的）来表示 <code>Logger</code> 类的地址，这就是符号引用。</p><h5 id="直接引用" tabindex="-1"><a class="header-anchor" href="#直接引用"><span>直接引用</span></a></h5><p>直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</p><p>直接引用和虚拟机实现的内存布局有关，如果有了直接引用，那引用的目标一定在内存中存在。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>解析的时候 <code>class</code> 已经被加载到方法区的内存中，因此要把符号引用转化为直接引用，也就是能直接找到该类实际内存地址的引用。</p></div><h3 id="_5、初始化" tabindex="-1"><a class="header-anchor" href="#_5、初始化"><span>5、初始化</span></a></h3><p>执行类的初始化代码</p><p>初始化阶段是虚拟机执行类构造器 <code>&lt;clinit\\&gt;()</code> 方法的过程。</p><p>在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源；比如：赋值、 <code>static</code>静态代码块</p><p><code>&lt;clinit&gt;()</code> 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。</p><p>例如以下代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Test</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    static</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        i = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;                </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 给变量赋值可以正常编译通过</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">print</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(i);  </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 这句编译器会提示“非法向前引用”</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于父类的 <code>&lt;clinit&gt;()</code> 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Parent</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> A</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    static</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        A = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">static</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Sub</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> extends</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Parent</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> B</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = A;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> main</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] args) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">     System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Sub</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">B</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);  </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 2</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 <code>&lt;clinit&gt;()</code> 方法。但接口与类不同的是，执行接口的 <code>&lt;clinit&gt;()</code> 方法不需要先执行父接口的 <code>&lt;clinit&gt;()</code> 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 <code>&lt;clinit&gt;()</code> 方法。</p><p>虚拟机会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 <code>&lt;clinit&gt;()</code> 方法，其它线程都会阻塞等待，直到活动线程执行 <code>&lt;clinit&gt;()</code> 方法完毕。如果在一个类的 <code>&lt;clinit&gt;()</code> 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果初始化一个类的时候，发现他的父类还没初始化，那么必须先初始化他的父类</p></div><h2 id="二、初始化顺序" tabindex="-1"><a class="header-anchor" href="#二、初始化顺序"><span>二、初始化顺序</span></a></h2><p>初始化顺序如下：</p><ol><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态代码块</li><li>父类非静态变量</li><li>父类非静态代码块</li><li>父类构造函数</li><li>子类非静态变量</li><li>子类非静态代码块</li><li>子类构造函数</li></ol><h3 id="_1、类初始化时机" tabindex="-1"><a class="header-anchor" href="#_1、类初始化时机"><span>1、类初始化时机</span></a></h3><p><strong>1、主动引用</strong></p><p>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：</p><ul><li>遇到 <code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code> 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 <code>new</code> 关键字实例化对象的时候；读取或设置一个类的静态字段的时候（被 <code>final</code> 修饰、已在编译期把结果放入常量池的静态字段除外）；以及调用一个类的静态方法的时候。</li><li>使用 <code>java.lang.reflect</code> 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 <code>main()</code> 方法的那个类），虚拟机会先初始化这个主类；</li></ul><p><strong>2、被动引用</strong></p><p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p><ul><li>通过子类引用父类的静态字段，不会导致父类初始化。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">SubClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">value</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);  </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// value 字段在 SuperClass 中定义</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 <code>Object</code> 的子类，其中包含了数组的属性和方法。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SuperClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">sca</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> SuperClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">10</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ConstClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">HELLOWORLD</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、类加载器" tabindex="-1"><a class="header-anchor" href="#三、类加载器"><span>三、类加载器</span></a></h2><h3 id="_1、类加载器的作用" tabindex="-1"><a class="header-anchor" href="#_1、类加载器的作用"><span>1、类加载器的作用</span></a></h3><ul><li>加载 <code>class</code></li><li>确定类的唯一性</li></ul><h5 id="加载-class" tabindex="-1"><a class="header-anchor" href="#加载-class"><span>加载 class</span></a></h5><p>类加载的加载阶段的第一个步骤，就是通过类加载器来完成的</p><p>类加载器的主要任务就是 “ 通过一个类的全限定名来获取描述此类的二进制字节流 ”</p><p>从程序员的角度来看，类加载器动态加载<code>class</code>文件到虚拟机中，并生成一个 <code>java.lang.Class</code> 实例，每个实例 都代表一个 <code>java</code> 类，可以根据该实例得到该类的信息，还可以通过<code>newInstance()</code>方法生成该类的一个对象。</p><h5 id="确定类的唯一性" tabindex="-1"><a class="header-anchor" href="#确定类的唯一性"><span>确定类的唯一性</span></a></h5><p>对于每一个类，都需要由加载它的加载器和这个类本身共同确立这个类在 Java 虚拟机中的唯一性</p><p>两个相同的类，只有是在同一个加载器加载的情况下才 “ 相等 ”</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里的 “ 相等 ” 是指代表类的 <code>Class</code> 对象的 <code>equals()</code> 方法、 <code>isAssignableFrom()</code> 方法、 <code>isInstance()</code> 方法的返回结果，也包括 <code>instanceof</code> 关键字对对象所属关系的 判定结果</p></div><h3 id="_2、类加载器的分类" tabindex="-1"><a class="header-anchor" href="#_2、类加载器的分类"><span>2、类加载器的分类</span></a></h3><ul><li>启动类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器 （Extension ClassLoader）</li><li>应用程序类加载器（Application ClassLoader）</li><li>自定义类加载器（User ClassLoader）</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>其中启动类加载器属于 <code>JVM</code> 的一部分,使用 <code>C++</code> 实现</p><p>其他类加载器都用 <code>java</code> 实现，独立于虚拟机，并且最终都继承自 <code>java.lang.ClassLoader</code></p></div><h5 id="启动类加载器" tabindex="-1"><a class="header-anchor" href="#启动类加载器"><span>启动类加载器</span></a></h5><p>启动类加载器主要负责加载 <code>JAVA_HOME\\lib</code> 目录或者被 <code>-Xbootclasspath</code> 参数指定目录中的部分类</p><p>具体加载哪些类可以通过 <code>System.getProperty(&quot;sun.boot.class.path&quot;)</code> 来查看。</p><h5 id="扩展类加载器" tabindex="-1"><a class="header-anchor" href="#扩展类加载器"><span>扩展类加载器</span></a></h5><p>负责加载 <code>JAVA_HOME\\lib\\ext</code> 目录或者被 <code>java.ext.dirs</code> 系统变量指定的路径中的所有类库</p><p>可以通过 <code>System.getProperty(&quot;java.ext.dirs&quot;)</code> 来查看具体都加载哪些类</p><h5 id="应用程序类加载器" tabindex="-1"><a class="header-anchor" href="#应用程序类加载器"><span>应用程序类加载器</span></a></h5><p>负责加载用户类路径（我们通常指定的 <code>classpath</code>）上的类</p><p>如果程序中没有自定义类加载器，应用程序类加载器就是程序<strong>默认</strong>的类加载器。</p><h5 id="自定义类加载器" tabindex="-1"><a class="header-anchor" href="#自定义类加载器"><span>自定义类加载器</span></a></h5><p><code>JVM</code> 提供的类加载器只能加载指定目录的类（<code>jar</code> 和 <code>class</code>），如果我们想从其他地方甚至网络上获取 <code>class</code> 文件，就需要自定义类加载器来实现</p><p>自定义类加载器主要都是通过继承 <code>ClassLoader</code> 或者它的子类来实现，但无论是通过继承 <code>ClassLoader</code> 还是它的子类，最终自定义类加载器的父加载器都是<strong>应用程序类加载器</strong></p><p>因为不管调用哪个父类加载器，创建的对象都必须最终调用 <code>java.lang.ClassLoader.getSystemClassLoader()</code> 作为父加载器， <code>getSystemClassLoader()</code> 方法的返回值是 <code>sun.misc.Launcher.AppClassLoader</code> 即应用程序类加载器。</p><h5 id="自定义类加载器实现" tabindex="-1"><a class="header-anchor" href="#自定义类加载器实现"><span><strong>自定义类加载器实现</strong></span></a></h5><p>以下代码中的 <code>FileSystemClassLoader</code> 是自定义类加载器，继承自 <code>java.lang.ClassLoader</code>，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（<code>.class</code> 文件），然后读取该文件内容，最后通过 <code>defineClass()</code> 方法来把这些字节代码转换成 <code>java.lang.Class</code> 类的实例。</p><p><code>java.lang.ClassLoader</code> 的 <code>loadClass()</code> 实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 <code>findClass()</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> FileSystemClassLoader</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> extends</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ClassLoader</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> rootDir</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> FileSystemClassLoader</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> rootDir</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        this</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">rootDir</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = rootDir;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    protected</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">throws</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ClassNotFoundException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        byte</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">classData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getClassData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (classData == </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            throw</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> ClassNotFoundException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> defineClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name, classData, </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">classData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> byte</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getClassData</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> className</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> path</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">classNameToPath</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(className);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        try</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            InputStream</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> ins</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> FileInputStream</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(path);</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            ByteArrayOutputStream</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> baos</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> ByteArrayOutputStream</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> bufferSize</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">4096</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            byte</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">buffer</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> byte</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[bufferSize];</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> bytesNumRead</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> ((bytesNumRead = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">ins</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">read</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(buffer)) != -</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">                baos</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">write</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(buffer, </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, bytesNumRead);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> baos</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">toByteArray</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">catch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">IOException</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">            e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> classNameToPath</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> className</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> rootDir + </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">File</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">separatorChar</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                + </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">className</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">replace</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">File</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">separatorChar</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;.class&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、双亲委派机制" tabindex="-1"><a class="header-anchor" href="#四、双亲委派机制"><span>四、双亲委派机制</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>双亲委派模型要求除了顶层的启动类加载器之外，其他的类加载器都应该有一个父类加载器</p><p>但是这种父子关系并不是继承关系，而是组合关系</p></div><p>就是当一个类加载器加载类的时候，如果有父加载器就先尝试让父加载器加载</p><p>如果父加载器还有父加载器就一直往上抛，一直把类加载的任务交给启动类加载器</p><p>然后启动类加载器如果加载不到类就会抛出 <code>ClassNotFoundException</code> 异常，之后把类加载的任务往下抛</p><figure><img src="`+e+'" alt="image-20230408172427553" tabindex="0" loading="lazy"><figcaption>image-20230408172427553</figcaption></figure><figure><img src="'+D+`" alt="image-20230408172529037" tabindex="0" loading="lazy"><figcaption>image-20230408172529037</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这样做的好处是，避免重复加载某一个类，保证类的唯一性</p></div><p><strong>实现</strong></p><p>以下是抽象类 <code>java.lang.ClassLoader</code> 的代码片段，其中的 <code>loadClass()</code> 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 <code>ClassNotFoundException</code>，此时尝试自己去加载。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> abstract</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ClassLoader</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // The parent class loader for delegation</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ClassLoader</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> parent</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">loadClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">throws</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ClassNotFoundException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> loadClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name, </span><span style="color:#569CD6;--shiki-dark:#569CD6;">false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    protected</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">loadClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">boolean</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> resolve</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">throws</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ClassNotFoundException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        synchronized</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getClassLoadingLock</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name)) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // First, check if the class has already been loaded</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            Class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">c</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findLoadedClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (c == </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                try</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (parent != </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                        c = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">parent</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">loadClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name, </span><span style="color:#569CD6;--shiki-dark:#569CD6;">false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                        c = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findBootstrapClassOrNull</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">catch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ClassNotFoundException</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> e</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                    // ClassNotFoundException thrown if class not found</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                    // from the non-null parent class loader</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (c == </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                    // If still not found, then invoke findClass in order</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                    // to find the class.</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    c = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (resolve) {</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">                resolveClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(c);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> c;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    protected</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findClass</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> name</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#569CD6;--shiki-dark:#569CD6;">throws</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> ClassNotFoundException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        throw</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> ClassNotFoundException</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(name);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,105),r=[o];function d(c,t){return a(),n("div",null,r)}const C=s(p,[["render",d],["__file","ClassLoader.html.vue"]]),h=JSON.parse('{"path":"/Doc/Java/JVM/ClassLoader.html","title":"类加载机制","lang":"zh-CN","frontmatter":{"order":1,"category":"八股文"},"headers":[{"level":2,"title":"一、类加载步骤","slug":"一、类加载步骤","link":"#一、类加载步骤","children":[{"level":3,"title":"1、加载","slug":"_1、加载","link":"#_1、加载","children":[]},{"level":3,"title":"2、验证","slug":"_2、验证","link":"#_2、验证","children":[]},{"level":3,"title":"3、准备","slug":"_3、准备","link":"#_3、准备","children":[]},{"level":3,"title":"4、解析","slug":"_4、解析","link":"#_4、解析","children":[]},{"level":3,"title":"5、初始化","slug":"_5、初始化","link":"#_5、初始化","children":[]}]},{"level":2,"title":"二、初始化顺序","slug":"二、初始化顺序","link":"#二、初始化顺序","children":[{"level":3,"title":"1、类初始化时机","slug":"_1、类初始化时机","link":"#_1、类初始化时机","children":[]}]},{"level":2,"title":"三、类加载器","slug":"三、类加载器","link":"#三、类加载器","children":[{"level":3,"title":"1、类加载器的作用","slug":"_1、类加载器的作用","link":"#_1、类加载器的作用","children":[]},{"level":3,"title":"2、类加载器的分类","slug":"_2、类加载器的分类","link":"#_2、类加载器的分类","children":[]}]},{"level":2,"title":"四、双亲委派机制","slug":"四、双亲委派机制","link":"#四、双亲委派机制","children":[]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":12.32,"words":3697},"filePathRelative":"Doc/Java/JVM/ClassLoader.md","localizedDate":"2024年2月19日"}');export{C as comp,h as data};
