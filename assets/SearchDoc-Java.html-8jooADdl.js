import{a as c,_ as d}from"./vZrdKAh19C-Yru1OTEc.js";import{_ as t,r as D,o as k,c as h,e as s,f as a,g as e,w as n,a as r}from"./app-Vg0IViah.js";const C="/notes-pages/assets/image-20210721203950559-T_azR6MF.png",u="/notes-pages/assets/image-20210721214221057-DDLPFgN5.png",y="/notes-pages/assets/image-20210721215923060-CSAimNqx.png",E="/notes-pages/assets/image-20210722102850818-ErbAXqmG.png",v="/notes-pages/assets/image-20210721220927286-B0MeMAK7.png",A={},m=s("h1",{id:"搜索文档-java",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#搜索文档-java"},[s("span",null,"搜索文档-Java")])],-1),F=s("code",null,"Elasticsearch",-1),b=s("code",null,"JSON",-1),g=s("code",null,"DSL",-1),q={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html",target:"_blank",rel:"noopener noreferrer"},B=r(`<p>常见的查询类型包括：</p><ul><li><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：<code>match_all</code></li><li><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如： <ul><li><code>match_query</code></li><li><code>multi_match_query</code></li></ul></li><li><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找<code>keyword</code>、数值、日期、<code>boolean</code>等类型字段。例如： <ul><li><code>ids</code></li><li><code>range</code></li><li><code>term</code></li></ul></li><li><strong>地理（geo）查询</strong>：根据经纬度查询。例如： <ul><li><code>geo_distance</code></li><li><code>geo_bounding_box</code></li></ul></li><li><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如： <ul><li><code>bool</code></li><li><code>function_score</code></li></ul></li></ul><h2 id="一、基本查询-match-all" tabindex="-1"><a class="header-anchor" href="#一、基本查询-match-all"><span>一、基本查询 match_all</span></a></h2><ul><li>查询类型为<code>match_all</code></li><li>没有查询条件</li></ul><p>相当于<code>SQL</code>：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">SELECT</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> * </span><span style="color:#569CD6;--shiki-dark:#569CD6;">FROM</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> hotel</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="hint-container details"><summary>返回结果含义</summary><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">  &quot;took&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 查询时间</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">  &quot;timed_out&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#569CD6;--shiki-dark:#569CD6;">false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 是否超时</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">  &quot;_shards&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    &quot;total&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    &quot;successful&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    &quot;skipped&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    &quot;failed&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">  &quot;hits&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : { </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 命中得数据</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    &quot;total&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : { </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 搜索到得总条数</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">      &quot;value&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">      &quot;relation&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;eq&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    &quot;max_score&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1.0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 得分</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    &quot;hits&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : [ </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 文档</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">      {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        &quot;_index&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hotel&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        &quot;_type&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;_doc&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        &quot;_id&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;61083&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        &quot;_score&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1.0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        &quot;_source&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : {</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;address&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;自由贸易试验区临港新片区南岛1号&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;brand&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;皇冠假日&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;business&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;滴水湖临港地区&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;city&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;上海&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;id&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">61083</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;location&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;30.890867, 121.937241&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;name&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;上海滴水湖皇冠假日酒店&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;pic&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;https://m.tuniucdn.com/fb3/s1/2n9c/312e971Rnj9qFyR3pPv4bTtpj1hX_w200_h200_c1_t0.jpg&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;price&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">971</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;score&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">44</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">          &quot;starName&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> : </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;五钻&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="发送搜索请求" tabindex="-1"><a class="header-anchor" href="#发送搜索请求"><span>发送搜索请求</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Test</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> testMatchAll</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() throws IOException {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 1.准备Request，指定索引库</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchRequest</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> request</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> SearchRequest</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hotel&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 2.准备DSL</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    request</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">source</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">query</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">matchAllQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 3.发送请求</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchResponse</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> response</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">restHighLevelClient</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">search</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(request, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RequestOptions</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">DEFAULT</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.解析响应 见下文</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    ...</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+C+`" alt="image-20210721203950559" tabindex="0" loading="lazy"><figcaption>image-20210721203950559</figcaption></figure><h3 id="解析响应" tabindex="-1"><a class="header-anchor" href="#解析响应"><span>解析响应</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> handleResponse</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SearchResponse</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> response) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.解析响应</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchHits</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> searchHits</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">response</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getHits</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.1.获取总条数</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    long</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> total</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">searchHits</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getTotalHits</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">().</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">value</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;共搜索到&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + total + </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;条数据&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.2.文档数组</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchHit</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">hits</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">searchHits</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getHits</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.3.遍历</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SearchHit</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hit</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> :</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> hits) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 获取文档source</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> json</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">hit</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">getSourceAsString</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 反序列化</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        HotelDoc</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hotelDoc</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">JSON</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">parseObject</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(json, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">HotelDoc</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">class</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        System</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">out</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">println</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hotelDoc = &quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + hotelDoc);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="image-20210721214221057" tabindex="0" loading="lazy"><figcaption>image-20210721214221057</figcaption></figure><p><code>elasticsearch</code>返回的结果是一个<code>JSON</code>字符串，结构包含：</p><ul><li><code>hits</code>：命中的结果 <ul><li><code>total</code>：总条数，其中的value是具体的总条数值</li><li><code>max_score</code>：所有结果中得分最高的文档的相关性算分</li><li><code>hits</code>：搜索结果的文档数组，其中的每个文档都是一个json对象 <ul><li><code>_source</code>：文档中的原始数据，也是json对象</li></ul></li></ul></li></ul><p>因此，我们解析响应结果，就是逐层解析<code>JSON</code>字符串，流程如下：</p><ul><li><code>SearchHits</code>：通过<code>response.getHits()</code>获取，就是JSON中的最外层的<code>hits</code>，代表命中的结果 <ul><li><code>SearchHits#getTotalHits().value</code>：获取总条数信息</li><li><code>SearchHits#getHits()</code>：获取<code>SearchHit</code>数组，也就是文档数组 <ul><li><code>SearchHit#getSourceAsString()</code>：获取文档结果中的<code>_source</code>，也就是原始的<code>json</code>文档数据</li></ul></li></ul></li></ul><h2 id="二、全文检索" tabindex="-1"><a class="header-anchor" href="#二、全文检索"><span>二、全文检索</span></a></h2><p>会对用户输入内容分词，== 常用于搜索框搜索 ==</p><p>全文检索查询的基本流程如下：</p><ul><li>对用户搜索的内容做分词，得到词条</li><li>根据词条去倒排索引库中匹配，得到文档<code>id</code></li><li>根据文档<code>id</code>找到文档，返回给用户</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>因为全文检索会对用户输入的内容进行分词，只要包含其中一个词就符合条件</p><p>因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的<code>text</code>类型的字段。</p></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">SELECT</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> * </span><span style="color:#569CD6;--shiki-dark:#569CD6;">FROM</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> hotel </span><span style="color:#569CD6;--shiki-dark:#569CD6;">WHERE</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> all </span><span style="color:#569CD6;--shiki-dark:#569CD6;">LIKE</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;%外滩如家%&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>全文检索的<code>match</code>和<code>multi_match</code>查询与<code>match_all</code>的<code>API</code>基本一致。差别是查询条件，也就是<code>query</code>的部分。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 单字段查询</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">matchQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;如家&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 多字段查询</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">multiMatchQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;如家&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;brand&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Test</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> testMatch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() throws IOException {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 1.准备Request</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchRequest</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> request</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> SearchRequest</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hotel&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 2.准备DSL</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    request</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">source</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        .</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">query</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">matchQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;all&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;如家&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 3.发送请求</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchResponse</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> response</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">restHighLevelClient</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">search</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(request, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RequestOptions</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">DEFAULT</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.解析响应</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">    handleResponse</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(response);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="image-20210721215923060" tabindex="0" loading="lazy"><figcaption>image-20210721215923060</figcaption></figure><h2 id="三、精准查询" tabindex="-1"><a class="header-anchor" href="#三、精准查询"><span>三、精准查询</span></a></h2><p>精确查询一般是查找<code>keyword</code>、数值、日期、<code>boolean</code>等类型字段。</p><p><strong>不会</strong>对搜索条件分词。常见的有：</p><ul><li><code>term</code>：根据词条精确值查询</li><li><code>range</code>：根据值的范围查询</li></ul>',30),_=s("div",{class:"language-json line-numbers-mode","data-ext":"json","data-title":"json"},[s("pre",{class:"shiki shiki-themes dark-plus dark-plus",style:{"background-color":"#1E1E1E","--shiki-dark-bg":"#1E1E1E",color:"#D4D4D4","--shiki-dark":"#D4D4D4"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@Test")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"void testMatch() throws IOException {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 1.准备Request")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    SearchRequest"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," request"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," ="),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," new"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," SearchRequest("),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}},'"hotel"'),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 2.准备DSL")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    request.source()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"        .query(QueryBuilders.termQuery("),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}},'"city"'),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},","),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}},' "杭州"'),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"));"),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}}," // 这里变化")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 3.发送请求")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    SearchResponse"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," response"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," ="),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," restHighLevelClient.search(request,"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," RequestOptions.DEFAULT);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 4.解析响应")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    handleResponse(response);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),f=s("div",{class:"language-json line-numbers-mode","data-ext":"json","data-title":"json"},[s("pre",{class:"shiki shiki-themes dark-plus dark-plus",style:{"background-color":"#1E1E1E","--shiki-dark-bg":"#1E1E1E",color:"#D4D4D4","--shiki-dark":"#D4D4D4"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"@Test")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"void testMatch() throws IOException {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 1.准备Request")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    SearchRequest"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," request"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," ="),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," new"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," SearchRequest("),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}},'"hotel"'),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 2.准备DSL")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    request.source()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"        .query(QueryBuilders.rangeQuery("),s("span",{style:{color:"#9CDCFE","--shiki-dark":"#9CDCFE"}},'"price"'),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},").get(100).lte(150));"),s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}}," // 这里变化")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 3.发送请求")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    SearchResponse"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," response"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," ="),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," restHighLevelClient.search(request,"),s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}}," RequestOptions.DEFAULT);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955","--shiki-dark":"#6A9955"}},"    // 4.解析响应")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F44747","--shiki-dark":"#F44747"}},"    handleResponse(response);")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4","--shiki-dark":"#D4D4D4"}},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),S=s("h2",{id:"四、地理坐标查询",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#四、地理坐标查询"},[s("span",null,"四、地理坐标查询")])],-1),x=s("p",null,"所谓的地理坐标查询，其实就是根据经纬度查询",-1),Q={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html",target:"_blank",rel:"noopener noreferrer"},R=r('<h3 id="矩形范围查询" tabindex="-1"><a class="header-anchor" href="#矩形范围查询"><span>矩形范围查询</span></a></h3><p>也就是<code>geo_bounding_box</code>查询，查询坐标落在某个矩形范围的所有文档：</p><figure><img src="'+c+'" alt="DKV9HZbVS6" tabindex="0" loading="lazy"><figcaption>DKV9HZbVS6</figcaption></figure><p>查询时，需要指定矩形的<strong>左上</strong>、<strong>右下</strong>两个点的坐标，然后画出一个矩形，落在该矩形内的都是符合条件的点</p><h3 id="附近查询" tabindex="-1"><a class="header-anchor" href="#附近查询"><span>附近查询</span></a></h3><p>也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值的所有文档。</p><p>换句话来说，在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件：</p><figure><img src="'+d+`" alt="vZrdKAh19C" tabindex="0" loading="lazy"><figcaption>vZrdKAh19C</figcaption></figure><h2 id="五、复合查询" tabindex="-1"><a class="header-anchor" href="#五、复合查询"><span>五、复合查询</span></a></h2><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p><ul><li><code>fuction score</code>：算分函数查询，可以控制文档相关性算分，控制文档排名</li><li><code>bool query</code>：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</li></ul><h3 id="相关性算分" tabindex="-1"><a class="header-anchor" href="#相关性算分"><span>相关性算分</span></a></h3><p><code>function_score</code>查询可以影响算分</p><p>包含3个要素：</p><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算<code>function score</code></li><li>加权方式：<code>function score</code> 与 <code>query score</code>如何运算</li></ul><p>前置准备：</p><p>我们给数据添加一个字段：<code>isAD</code>，<code>Boolean</code>类型：</p><ul><li><code>true</code>：需要提高得分</li><li><code>false</code>：不需要提高得分</li></ul><p>这样<code>function_score</code>包含3个要素就很好确定了：</p><ul><li>过滤条件：判断<code>isAD</code> 是否为<code>true</code></li><li>算分函数：可以用最简单暴力的<code>weight</code>，固定加权值</li><li>加权方式：可以用默认的相乘，大大提高算分</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> buildBasicQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">RequestParams</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> params, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">SearchRequest</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> request) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    BoolQueryBuilder</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> boolQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">boolQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 条件 ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 算分控制</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    FunctionScoreQueryBuilder</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> functionScoreQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> =</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">        QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">functionScoreQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 原始查询，相关性算分的查询</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        boolQuery,</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // function score的数组</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> FunctionScoreQueryBuilder</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">FilterFunctionBuilder</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[]{</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // 其中的一个function score 元素</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            new</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> FunctionScoreQueryBuilder.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">FilterFunctionBuilder</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                // 过滤条件</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">                QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">termQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;isAD&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                // 算分函数</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">                ScoreFunctionBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">weightFactorFunction</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">10</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            )</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        });</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    request</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">source</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">().</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">query</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(functionScoreQuery);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>原始查询</strong>条件：基于这个条件搜索文档，并且基于<code>BM25</code>算法给文档打分，<strong>原始算分</strong>（query score)</li><li><strong>过滤条件</strong>：符合该条件的文档才会重新算分</li><li><strong>算分函数</strong> ：符合过滤条件的文档要根据这个函数做运算，得到函数算分（function score）</li><li>有四种函数 <ul><li><code>weight</code>：函数结果是常量</li><li><code>field_value_factor</code>：以文档中的某个字段值作为函数结果</li><li><code>random_score</code>：以随机数作为函数结果</li><li><code>script_score</code>：自定义算分函数算法</li></ul></li><li>运算模式：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： <ul><li><code>multiply</code>：相乘</li><li><code>replace</code>：用<code>function score</code>替换<code>query score</code></li><li>其它，例如：<code>sum、avg、max、min</code></li></ul></li></ul><figure><img src="`+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="布尔查询" tabindex="-1"><a class="header-anchor" href="#布尔查询"><span>布尔查询</span></a></h3><p>布尔查询是用<code>must</code>、<code>must_not</code>、<code>filter</code>等方式组合其它查询</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Test</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> testBool</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() throws IOException {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 1.准备Request</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchRequest</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> request</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> SearchRequest</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;hotel&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 2.准备DSL</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 2.1.准备BooleanQuery</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    BoolQueryBuilder</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> boolQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">boolQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 2.2.添加term</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    boolQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">must</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">termQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;city&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;杭州&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 2.3.添加range</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    boolQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">filter</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">QueryBuilders</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">rangeQuery</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;price&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">).</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">lte</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">250</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    request</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">source</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">().</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">query</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(boolQuery);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 3.发送请求</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    SearchResponse</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> response</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">restHighLevelClient</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">search</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(request, </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">RequestOptions</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">DEFAULT</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    // 4.解析响应</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">    handleResponse</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(response);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="image-20210721220927286" tabindex="0" loading="lazy"><figcaption>image-20210721220927286</figcaption></figure>',27);function j(w,H){const o=D("ExternalLinkIcon"),p=D("CodeTabs");return k(),h("div",null,[m,s("p",null,[F,a("提供了基于"),b,a("的"),g,a("（"),s("a",q,[a("Domain Specific Languageopen in new window"),e(o)]),a("）来定义查询。")]),B,e(p,{id:"251",data:[{id:"term"},{id:"range"}]},{title0:n(({value:i,isActive:l})=>[a("term")]),title1:n(({value:i,isActive:l})=>[a("range")]),tab0:n(({value:i,isActive:l})=>[_]),tab1:n(({value:i,isActive:l})=>[f]),_:1}),S,x,s("p",null,[a("官方文档："),s("a",Q,[a("https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html"),e(o)])]),R])}const O=t(A,[["render",j],["__file","SearchDoc-Java.html.vue"]]),J=JSON.parse('{"path":"/Use/Java/ElasticSearch/SearchDoc-Java.html","title":"搜索文档-Java","lang":"zh-CN","frontmatter":{"order":7,"category":"使用篇"},"headers":[{"level":2,"title":"一、基本查询 match_all","slug":"一、基本查询-match-all","link":"#一、基本查询-match-all","children":[{"level":3,"title":"发送搜索请求","slug":"发送搜索请求","link":"#发送搜索请求","children":[]},{"level":3,"title":"解析响应","slug":"解析响应","link":"#解析响应","children":[]}]},{"level":2,"title":"二、全文检索","slug":"二、全文检索","link":"#二、全文检索","children":[]},{"level":2,"title":"三、精准查询","slug":"三、精准查询","link":"#三、精准查询","children":[]},{"level":2,"title":"四、地理坐标查询","slug":"四、地理坐标查询","link":"#四、地理坐标查询","children":[{"level":3,"title":"矩形范围查询","slug":"矩形范围查询","link":"#矩形范围查询","children":[]},{"level":3,"title":"附近查询","slug":"附近查询","link":"#附近查询","children":[]}]},{"level":2,"title":"五、复合查询","slug":"五、复合查询","link":"#五、复合查询","children":[{"level":3,"title":"相关性算分","slug":"相关性算分","link":"#相关性算分","children":[]},{"level":3,"title":"布尔查询","slug":"布尔查询","link":"#布尔查询","children":[]}]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":6.31,"words":1894},"filePathRelative":"Use/Java/ElasticSearch/SearchDoc-Java.md","localizedDate":"2024年2月19日"}');export{O as comp,J as data};
