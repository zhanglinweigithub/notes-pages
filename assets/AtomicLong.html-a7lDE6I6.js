import{_ as s,o as n,c as a,a as i}from"./app-Vg0IViah.js";const l={},e=i(`<h1 id="atomiclong、longadder" tabindex="-1"><a class="header-anchor" href="#atomiclong、longadder"><span>AtomicLong、LongAdder</span></a></h1><p><code>LongAdder</code>的吞吐量和平均耗时均优于<code>AtomicLong</code></p><p>普通场景保证线程安全，建议使用<code>AtomicLong</code>，一些高并发的场景，比如限流计数器，建议使用<code>LongAdder</code>替换<code>AtomicLong</code>，以提高性能</p><h2 id="一、atomiclong" tabindex="-1"><a class="header-anchor" href="#一、atomiclong"><span>一、AtomicLong</span></a></h2><p>原子类，是线程安全的</p><p>在32位的操作系统中，64位的<code>Long</code>类型变量会被<code>jvm</code>拆分为两个32位的来操作，因此不具备原子性。而<code>AtomicLong</code>类型可以保证原子性</p><div class="hint-container info"><p class="hint-container-title">说明</p><p><code>AtomicInteger</code>, <code>AtomicLong</code>和<code>AtomicBoolean</code>这3个基本类型的原子类大差不差，基本一样</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 构造函数</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">AtomicLong</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 创建值为initialValue的AtomicLong对象</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">AtomicLong</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> initialValue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式设置当前值为newValue</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> set</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> newValue) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 获取当前值</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> get</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式将当前值减 1，并返回减1后的值。等价于“--num”</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> decrementAndGet</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式将当前值减 1，并返回减1前的值。等价于“num--”</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getAndDecrement</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式将当前值加 1，并返回加1后的值。等价于“++num”</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> incrementAndGet</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式将当前值加 1，并返回加1前的值。等价于“num++”</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getAndIncrement</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式将delta与当前值相加，并返回相加后的值。</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> addAndGet</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> delta) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式将delta添加到当前值，并返回相加前的值。</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getAndAdd</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> delta) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 如果当前值 == expect，则以原子方式将该值设置为update。成功返回true，否则返回false，并且不修改原值。</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> compareAndSet</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> expect, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> update)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">// 以原子方式设置当前值为newValue，并返回旧值。</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">final</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> long</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> getAndSet</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> newValue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//以下部分省略……</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、longadder" tabindex="-1"><a class="header-anchor" href="#二、longadder"><span>二、LongAdder</span></a></h2><p><code>LongAdder</code>的吞吐量和平均耗时均优于<code>AtomicLong</code></p>`,10),o=[e];function d(p,c){return n(),a("div",null,o)}const D=s(l,[["render",d],["__file","AtomicLong.html.vue"]]),t=JSON.parse('{"path":"/Use/Java/Concurrent/AtomicLong.html","title":"AtomicLong、LongAdder","lang":"zh-CN","frontmatter":{"category":"使用篇"},"headers":[{"level":2,"title":"一、AtomicLong","slug":"一、atomiclong","link":"#一、atomiclong","children":[]},{"level":2,"title":"二、LongAdder","slug":"二、longadder","link":"#二、longadder","children":[]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":1.5,"words":449},"filePathRelative":"Use/Java/Concurrent/AtomicLong.md","localizedDate":"2024年2月19日"}');export{D as comp,t as data};
