import{_ as s,o as a,c as n,a as i}from"./app-Vg0IViah.js";const l="/notes-pages/assets/image-20230407131026148-C74RcNZq.png",p="/notes-pages/assets/image-20230407131845154-q7fX0E-a.png",D="/notes-pages/assets/image-20230407132449444-PQeMbnnu.png",r="/notes-pages/assets/image-20230407132823494-4R7aH7Bd.png",e="/notes-pages/assets/image-20230407131515288-Byfko5AZ.png",o="/notes-pages/assets/image-20230407132058732-C65FUD7x.png",k="/notes-pages/assets/image-20230407133044780-BR6VUhvV.png",d="/notes-pages/assets/image-20230407135510522-DvRs41Fk.png",c={},t=i('<h1 id="算法基础" tabindex="-1"><a class="header-anchor" href="#算法基础"><span>算法基础</span></a></h1><h2 id="一、排序算法" tabindex="-1"><a class="header-anchor" href="#一、排序算法"><span>一、排序算法</span></a></h2><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h3><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p><blockquote><p>排序前：<code>{4,5,6,3,2,1}</code></p><p>排序后：<code>{1,2,3,4,5,6}</code></p></blockquote><p>排序原理：</p><ol><li>比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。</li><li>对每一对相邻元素做同样的工作，从开始第一对元素到结尾的最后一对元素。最终最后位置的元素就是最大 值。</li></ol><figure><img src="'+l+`" alt="image-20230407131026148" tabindex="0" loading="lazy"><figcaption>image-20230407131026148</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Bubble</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    对数组a中的元素进行排序</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i &gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i--) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; j &lt; i; j++) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a[j], a[j + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">])) {</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">                    exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, j, j + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    比较v元素是否大于w元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> w</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(w) &gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    数组元素i和j交换位置</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> t</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = a[i];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[i] = a[j];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[j] = t;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h3><p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法。</p><blockquote><p>排序前：<code>{4,3,2,10,12,1,5,6}</code></p><p>排序后：<code>{1,2,3,4,5,6,10,12}</code></p></blockquote><p><strong>排序原理：</strong></p><p>1.把所有的元素分为两组，已经排序的和未排序的；</p><p>2.找到未排序的组中的第一个元素，向已经排序的组中进行插入；</p><p>3.倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待 插入元素放到这个位置，其他的元素向后移动一位；</p><figure><img src="`+p+`" alt="image-20230407131845154" tabindex="0" loading="lazy"><figcaption>image-20230407131845154</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Insertion</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    对数组a中的元素进行排序</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i &lt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">			//当前元素为a[i],依次和i前面的元素比较，找到一个小于等于a[i]的元素</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = i; j &gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; j--) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a[j - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">], a[j])) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">					//交换元素</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">                    exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, j - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, j);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">					//找到了该元素，结束</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                    break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    比较v元素是否大于w元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> w</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(w) &gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    数组元素i和j交换位置</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> t</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = a[i];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[i] = a[j];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[j] = t;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序"><span>归并排序</span></a></h3><p>归并排序（Merge Sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子 序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序 表，称为二路归并。</p><blockquote><p>排序前：<code>{8,4,5,7,1,3,6,2}</code></p><p>排序后：<code>{1,2,3,4,5,6,7,8}</code></p></blockquote><p><strong>排序原理：</strong></p><p>1.尽可能的一组数据拆分成两个元素相等的子组，并对每一个子组继续拆分，直到拆分后的每个子组的元素个数是 1为止。</p><p>2.将相邻的两个子组进行合并成一个有序的大组；</p><p>3.不断的重复步骤2，直到最终只有一个组为止。</p><figure><img src="`+D+`" alt="image-20230407132449444" tabindex="0" loading="lazy"><figcaption>image-20230407132449444</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Merge</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">assist</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//归并所需要的辅助数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    对数组a中的元素进行排序</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        assist = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> lo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hi</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, lo, hi);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    对数组a中从lo到hi的元素进行排序</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> lo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hi</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (hi &lt;= lo) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> mid</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = lo + (hi - lo) / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//对lo到mid之间的元素进行排序；</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, lo, mid);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//对mid+1到hi之间的元素进行排序；</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, mid + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, hi);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//对lo到mid这组数据和mid到hi这组数据进行归并</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        merge</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, lo, mid, hi);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    对数组中，从lo到mid为一组，从mid+1到hi为一组，对这两组数据进行归并</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> merge</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> lo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> mid</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hi</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//lo到mid这组数据和mid+1到hi这组数据归并到辅助数组assist对应的索引处</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = lo;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//定义一个指针，指向assist数组中开始填充数据的索引</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> p1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = lo;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//定义一个指针，指向第一组数据的第一个元素</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> p2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = mid + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//定义一个指针，指向第二组数据的第一个元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        //比较左边小组和右边小组中的元素大小，哪个小，就把哪个数据填充到assist数组中</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (p1 &lt;= mid &amp;&amp; p2 &lt;= hi) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">less</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a[p1], a[p2])) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                assist[i++] = a[p1++];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                assist[i++] = a[p2++];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//上面的循环结束后，如果退出循环的条件是p1&lt;=mid，则证明左边小组中的数据已经归并完毕，如果退</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        出循环的条件是p2 &lt;= hi, 则证明右边小组的数据已经填充完毕；</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//所以需要把未填充完毕的数据继续填充到assist中,//下面两个循环，只会执行其中的一个</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (p1 &lt;= mid) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            assist[i++] = a[p1++];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (p2 &lt;= hi) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            assist[i++] = a[p2++];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//到现在为止，assist数组中，从lo到hi的元素是有序的，再把数据拷贝到a数组中对应的索引处</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> index</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = lo; index &lt;= hi; index++) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            a[index] = assist[index];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    比较v元素是否小于w元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> less</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> w</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(w) &lt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    数组元素i和j交换位置</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> t</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = a[i];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[i] = a[j];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[j] = t;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h3><p>快速排序（Quick Sort）是对冒泡排序的一种改进。</p><p>它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一 部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序 过程可以递归进行，以此达到整个数据变成有序序列。</p><blockquote><p>排序前:<code>{6, 1, 2, 7, 9, 3, 4, 5, 8}</code></p><p>排序后:<code>{1, 2, 3, 4, 5, 6, 7, 8, 9}</code></p></blockquote><p><strong>排序原理：</strong></p><p>1.首先设定一个分界值，通过该分界值将数组分成左右两部分；</p><p>2.将大于或等于分界值的数据放到到数组右边，小于分界值的数据放到数组的左边。此时左边部分中各元素都小于 或等于分界值，而右边部分中各元素都大于或等于分界值；</p><p>3.然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两 部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p><p>4.重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当 左侧和右侧两个部分的数据排完序后，整个数组的排序也就完成了。</p><figure><img src="`+r+`" alt="image-20230407132823494" tabindex="0" loading="lazy"><figcaption>image-20230407132823494</figcaption></figure><p><strong>切分原理：</strong> 把一个数组切分成两个子数组的基本思想：</p><p>1.找一个基准值，用两个指针分别指向数组的头部和尾部；</p><p>2.先从尾部向头部开始搜索一个比基准值小的元素，搜索到即停止，并记录指针的位置；</p><p>3.再从头部向尾部开始搜索一个比基准值大的元素，搜索到即停止，并记录指针的位置；</p><p>4.交换当前左边指针位置和右边指针位置的元素；</p><p>5.重复2,3,4步骤，直到左边指针的值大于右边指针的值停止。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Quick</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> lo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hi</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, lo, hi);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> lo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hi</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (hi &lt;= lo) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//对a数组中，从lo到hi的元素进行切分</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> partition</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">partition</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, lo, hi);</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//对左边分组中的元素进行排序</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//对右边分组中的元素进行排序</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, lo, partition - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, partition + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, hi);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> partition</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> lo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> hi</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> key</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = a[lo];</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//把最左边的元素当做基准值</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> left</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = lo;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//定义一个左侧指针，初始指向最左边的元素</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> right</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = hi + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//定义一个右侧指针，初始指向左右侧的元素下一个位置</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//进行切分</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//先从右往左扫描，找到一个比基准值小的元素</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">less</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(key, a[--right])) {</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//循环停止，证明找到了一个比基准值小的元素</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (right == lo) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                    break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//已经扫描到最左边了，无需继续扫描</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//再从左往右扫描，找一个比基准值大的元素</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">less</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a[++left], key)) {</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//循环停止，证明找到了一个比基准值大的元素</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (left == hi) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                    break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//已经扫描到了最右边了，无需继续扫描</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (left &gt;= right) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//扫描完了所有元素，结束循环</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//交换left和right索引处的元素</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">                exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, left, right);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">//交换最后rigth索引处和基准值所在的索引处的值</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">        exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, lo, right);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> right;</span><span style="color:#6A9955;--shiki-dark:#6A9955;">//right就是切分的界限</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    数组元素i和j交换位置</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> t</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = a[i];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[i] = a[j];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[j] = t;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    比较v元素是否小于w元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> less</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> w</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(w) &lt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h3><p>选择排序（Selection Sort）是一种更加简单直观的排序方法。</p><blockquote><p>排序前：<code>{4,6,8,7,9,2,10,1}</code></p><p>排序后：<code>{1,2,4,5,7,8,9,10}</code></p></blockquote><p><strong>排序原理：</strong></p><p>1.每一次遍历的过程中，都假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较，如果当前索引处 的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引</p><p>2.交换第一个索引处和最小值所在的索引处的值</p><figure><img src="`+e+`" alt="image-20230407131515288" tabindex="0" loading="lazy"><figcaption>image-20230407131515288</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Selection</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    对数组a中的元素进行排序</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i &lt;= </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">			//假定本次遍历，最小值所在的索引是i</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> minIndex</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = i;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = i + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; j &lt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; j++) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a[minIndex], a[j])) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">					//跟换最小值所在的索引</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    minIndex = j;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">			//交换i索引处和minIndex索引处的值</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">            exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, i, minIndex);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    比较v元素是否大于w元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> w</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(w) &gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    数组元素i和j交换位置</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> t</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = a[i];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[i] = a[j];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[j] = t;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序"><span>希尔排序</span></a></h3><p>希尔排序（Shell Sort）是插入排序的一种，又称“缩小增量排序”，是插入排序算法的一种更高效的改进版本。</p><blockquote><p>排序前：<code>{9,1,2,5,7,4,8,6,3,5}</code></p><p>排序后：<code>{1,2,3,4,5,5,6,7,8,9}</code></p></blockquote><p><strong>排序原理</strong>：</p><p>1.选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组；</p><p>2.对分好组的每一组数据完成插入排序；</p><p>3.减小增长量，最小减为1，重复第二步操作。</p><figure><img src="`+o+`" alt="image-20230407132058732" tabindex="0" loading="lazy"><figcaption>image-20230407132058732</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> Shell</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    对数组a中的元素进行排序</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> sort</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> N</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">		//确定增长量h的最大值</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> h</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (h &lt; N / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            h = h * </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">		//当增长量h小于1，排序结束</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (h &gt;= </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">			//找到待插入的元素</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = h; i &lt; N; i++) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">				//a[i]就是待插入的元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">				//把a[i]插入到a[i-h],a[i-2h],a[i-3h]...序列中</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = i; j &gt;= h; j -= h) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">					//a[j]就是待插入元素，依次和a[j-h],a[j-2h],a[j-3h]进行比较，如果a[j]小，那么</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                    //交换位置，如果不小于，a[j] 大，则插入完成。</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a[j - h], a[j])) {</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">                        exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(a, j, j - h);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                        break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            h /= </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    比较v元素是否大于w元素</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> greater</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> w</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> v</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(w) &gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    /*</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    数组元素i和j交换位置</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">    */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> exch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Comparable</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        Comparable</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> t</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = a[i];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[i] = a[j];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        a[j] = t;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、排序的稳定性" tabindex="-1"><a class="header-anchor" href="#二、排序的稳定性"><span>二、排序的稳定性</span></a></h2><h3 id="稳定性的定义" tabindex="-1"><a class="header-anchor" href="#稳定性的定义"><span><strong>稳定性的定义</strong></span></a></h3><p>数组arr中有若干元素，其中A元素和B元素相等，并且A元素在B元素前面，如果使用某种排序算法排序后，能够保 证A元素依然在B元素的前面，可以说这个该算法是稳定的。</p><figure><img src="`+k+'" alt="image-20230407133044780" tabindex="0" loading="lazy"><figcaption>image-20230407133044780</figcaption></figure><p>如果一组数据只需要一次排序，则稳定性一般是没有意义的，如果一组数据需要多次排序，稳定性是有意义的。例 如要排序的内容是一组商品对象，第一次排序按照价格由低到高排序，第二次排序按照销量由高到低排序，如果第 二次排序使用稳定性算法，就可以使得相同销量的对象依旧保持着价格高低的顺序展现，只有销量不同的对象才需 要重新排序。这样既可以保持第一次排序的原有意义，而且可以减少系统开销。</p><h3 id="常见排序算法的稳定性" tabindex="-1"><a class="header-anchor" href="#常见排序算法的稳定性"><span>常见排序算法的稳定性</span></a></h3><h4 id="冒泡排序-1" tabindex="-1"><a class="header-anchor" href="#冒泡排序-1"><span>冒泡排序</span></a></h4><p>只有当arr[i]&gt;arr[i+1]的时候，才会交换元素的位置，而相等的时候并不交换位置，所以冒泡排序是一种<strong>稳定排序算法</strong>。</p><h4 id="选择排序-1" tabindex="-1"><a class="header-anchor" href="#选择排序-1"><span>选择排序</span></a></h4><p>选择排序是给每个位置选择当前元素最小的,例如有数据{5(1)，8 ，5(2)， 2， 9 },第一遍选择到的最小元素为2， 所以5(1)会和2进行交换位置，此时5(1)到了5(2)后面，破坏了稳定性，所以选择排序是一种<strong>不稳定的排序算法</strong>。</p><h4 id="插入排序-1" tabindex="-1"><a class="header-anchor" href="#插入排序-1"><span>插入排序</span></a></h4><p>比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其 后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么把要插入的元素放在相等 元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是<strong>稳定的</strong>。</p><h4 id="希尔排序-1" tabindex="-1"><a class="header-anchor" href="#希尔排序-1"><span>希尔排序</span></a></h4><p>希尔排序是按照不同步长对元素进行插入排序 ,虽然一次插入排序是稳定的，不会改变相同元素的相对顺序，但在 不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以希尔排序是<strong>不稳定的</strong>。</p><h4 id="归并排序-1" tabindex="-1"><a class="header-anchor" href="#归并排序-1"><span>归并排序</span></a></h4><p>归并排序在归并的过程中，只有arr[i]&lt;arr[i+1]的时候才会交换位置，如果两个元素相等则不会交换位置，所以它并不会破坏稳定性，归并排序是<strong>稳定的</strong>。</p><h4 id="快速排序-1" tabindex="-1"><a class="header-anchor" href="#快速排序-1"><span>快速排序</span></a></h4><p>快速排序需要一个基准值，在基准值的右侧找一个比基准值小的元素，在基准值的左侧找一个比基准值大的元素， 然后交换这两个元素，此时会破坏稳定性，所以快速排序是一种<strong>不稳定的算法</strong>。</p><h2 id="三、查找算法" tabindex="-1"><a class="header-anchor" href="#三、查找算法"><span>三、查找算法</span></a></h2><h3 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h3><p>二分查找（Binary Search）算法，也叫折半查找算法</p><p>使用二分查找的前提，必须是一个有序的数据集合</p><p><strong>查找原理</strong>：每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0</p><blockquote><p>若要查找的元素比中间元素大，则丢弃左侧元素，对右侧元素重复该步骤，反之亦然。</p></blockquote><blockquote><p>数组：1, 2, 4, 5, 6, 7, 9, 12, 15, 19, 23, 26, 29, 34, 39</p><p>查找：26</p></blockquote><figure><img src="'+d+`" alt="image-20230407135510522" tabindex="0" loading="lazy"><figcaption>image-20230407135510522</figcaption></figure><p>如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值这往右边继续查找</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">     *</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">     * </span><span style="color:#569CD6;--shiki-dark:#569CD6;">@param</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> nums</span><span style="color:#6A9955;--shiki-dark:#6A9955;">  数组</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">     * </span><span style="color:#569CD6;--shiki-dark:#569CD6;">@param</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> n</span><span style="color:#6A9955;--shiki-dark:#6A9955;">     数组长度</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">     * </span><span style="color:#569CD6;--shiki-dark:#569CD6;">@param</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> value</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> 要查找的值</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">     * </span><span style="color:#569CD6;--shiki-dark:#569CD6;">@return</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">     */</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">private</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> bserach</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] nums, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> n, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> value) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> low</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> high</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = n - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (low &lt;= high) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">            // 找出中间下标 </span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> mid</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = low + ((high - low) &gt;&gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (nums[mid] &gt; value) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                high = mid - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (nums[mid] &lt; value) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                low = mid + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> mid;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> -</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89),C=[t];function h(y,v){return a(),n("div",null,C)}const A=s(c,[["render",h],["__file","Algorithm.html.vue"]]),m=JSON.parse('{"path":"/Use/Java/Algorithm/Algorithm.html","title":"算法基础","lang":"zh-CN","frontmatter":{"order":1,"category":"使用篇"},"headers":[{"level":2,"title":"一、排序算法","slug":"一、排序算法","link":"#一、排序算法","children":[{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":3,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[]},{"level":3,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"选择排序","slug":"选择排序","link":"#选择排序","children":[]},{"level":3,"title":"希尔排序","slug":"希尔排序","link":"#希尔排序","children":[]}]},{"level":2,"title":"二、排序的稳定性","slug":"二、排序的稳定性","link":"#二、排序的稳定性","children":[{"level":3,"title":"稳定性的定义","slug":"稳定性的定义","link":"#稳定性的定义","children":[]},{"level":3,"title":"常见排序算法的稳定性","slug":"常见排序算法的稳定性","link":"#常见排序算法的稳定性","children":[]}]},{"level":2,"title":"三、查找算法","slug":"三、查找算法","link":"#三、查找算法","children":[{"level":3,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[]}]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":14.02,"words":4206},"filePathRelative":"Use/Java/Algorithm/Algorithm.md","localizedDate":"2024年2月19日"}');export{A as comp,m as data};
