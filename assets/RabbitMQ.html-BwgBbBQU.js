import{_ as s,o as a,c as n,a as i}from"./app-Vg0IViah.js";const l="/notes-pages/assets/1673600656616-9937e487-7b03-45a6-b1c2-5943366ffc46-CTEWeY3a.png",e={},r=i(`<h1 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq"><span>RabbitMQ</span></a></h1><ul><li><strong>Server：接收客户端的连接，实现AMQP实体服务。</strong></li><li><strong>Connection：连接，应用程序与Server的网络连接，TCP连接。</strong></li><li><strong>Channel：信道，消息读写等操作在信道中进行。客户端可以建立多个信道，每个信道代表一个会话任务。</strong></li><li><strong>Message：消息，应用程序和服务器之间传送的数据，消息可以非常简单，也可以很复杂。由Properties和Body组成。Properties为外包装，可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body就是消息体内容。</strong></li><li><strong>Virtual Host：虚拟主机，用于逻辑隔离。一个虚拟主机里面可以有若干个Exchange和Queue，同一个虚拟主机里面不能有相同名称的Exchange或Queue。</strong></li><li><strong>Exchange：交换机，接收消息，按照路由规则将消息路由到一个或者多个队列。如果路由不到，或者返回给生产者，或者直接丢弃。RabbitMQ常用的交换器常用类型有direct、topic、fanout、headers四种，后面详细介绍。</strong></li></ul><p><strong>注：只负责转发消息，不具备存储消息的能力</strong>，<strong>因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</strong></p><ul><li><strong>Binding：绑定，交换器和消息队列之间的虚拟连接，绑定中可以包含一个或者多个RoutingKey。</strong></li><li><strong>RoutingKey：路由键，生产者将消息发送给交换器的时候，会发送一个RoutingKey，用来指定路由规则，这样交换器就知道把消息发送到哪个队列。路由键通常为一个“.”分割的字符串，例如“com.rabbitmq”。</strong></li><li><strong>Queue：消息队列，用来保存消息，供消费者消费</strong></li></ul><h2 id="一、依赖" tabindex="-1"><a class="header-anchor" href="#一、依赖"><span>一、依赖</span></a></h2><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">dependency</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">groupId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">groupId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">artifactId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">spring-boot-starter-amqp</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">artifactId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">dependency</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">&lt;!--配置JSON格式消息转换器，需要在容器中添加 MessageConverter 的Bean--&gt;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">&lt;!--具体请看 配置JSON格式转换器篇--&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">dependency</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">groupId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">com.fasterxml.jackson.dataformat</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">groupId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">artifactId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">jackson-dataformat-xml</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">artifactId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">version</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">2.9.10</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">version</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">dependency</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、配置" tabindex="-1"><a class="header-anchor" href="#二、配置"><span>二、配置</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>发送端、接收端都要配置</p></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">spring</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">  rabbitmq</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    host</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">192.168.150.101</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 主机名</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    port</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">5672</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 端口</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    virtual-host</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">/</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 虚拟主机</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    username</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">itcast</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 用户名</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    password</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123321</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 密码</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    listener</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">      simple</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        prefetch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 每次只能获取一条消息，处理完成才能获取下一个消息</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        acknowledge-mode</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">none</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # none关闭ack、auto自动ack、manual手动ack</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">        retry</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          enabled</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 开启消费者失败重试</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          initial-interval</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1000</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 初识的失败等待时长为1秒</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          multiplier</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          max-attempts</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">3</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 最大重试次数</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">          stateless</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # true无状态；false有状态。如果业务中包含事务，这里改为false</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    publisher-confirm-type</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">correlated</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # simple同步等待confirm结果，直到超时,correlated异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    publisher-returns</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 同样是基于callback机制，不过是定义ReturnCallback</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    template</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">      mandatory</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#6A9955;--shiki-dark:#6A9955;"> # 定义消息路由失败时的策略。true，则调用ReturnCallback；false：则直接丢弃消息</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>集群</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;"># 集群</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">spring</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">	rabbitmq</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">		addresses</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">192.168.150.105:8071, 192.168.150.105:8072, 192.168.150.105:8073</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    	username</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">itcast</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    	password</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">123321</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    	virtual-host</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">: </span><span style="color:#CE9178;--shiki-dark:#CE9178;">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、json格式消息转换器" tabindex="-1"><a class="header-anchor" href="#三、json格式消息转换器"><span>三、JSON格式消息转换器</span></a></h2><p><code>Spring</code>会把你发送的消息序列化为字节发送给<code>MQ</code>，接收消息的时候，还会把字节反序列化为<code>Java</code>对象</p><p>只不过，默认情况下<code>Spring</code>采用的序列化方式是<code>JDK</code>序列化。众所周知，<code>JDK</code>序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>发送消息后查看控制台：</p><figure><img src="`+l+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>显然，<code>JDK</code>序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用<code>JSON</code>方式来做序列化和反序列化</p><h3 id="_1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖"><span>1、引入依赖</span></a></h3><p>在 <code>publisher</code> 和 <code>consumer</code> 两个服务中都引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#808080;--shiki-dark:#808080;">&lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">dependency</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">groupId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">com.fasterxml.jackson.dataformat</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">groupId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">artifactId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">jackson-dataformat-xml</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">artifactId</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">  &lt;</span><span style="color:#569CD6;--shiki-dark:#569CD6;">version</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">2.9.10</span><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">version</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;--shiki-dark:#808080;">&lt;/</span><span style="color:#569CD6;--shiki-dark:#569CD6;">dependency</span><span style="color:#808080;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、配置" tabindex="-1"><a class="header-anchor" href="#_2、配置"><span>2、配置</span></a></h3><p>在启动类中添加一个<code>Bean</code>即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">@</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> MessageConverter</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> jsonMessageConverter</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Jackson2JsonMessageConverter</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),p=[r];function o(d,t){return a(),n("div",null,p)}const k=s(e,[["render",o],["__file","RabbitMQ.html.vue"]]),D=JSON.parse('{"path":"/Use/Java/RabbitMQ/RabbitMQ.html","title":"RabbitMQ","lang":"zh-CN","frontmatter":{"order":1,"category":"使用篇"},"headers":[{"level":2,"title":"一、依赖","slug":"一、依赖","link":"#一、依赖","children":[]},{"level":2,"title":"二、配置","slug":"二、配置","link":"#二、配置","children":[]},{"level":2,"title":"三、JSON格式消息转换器","slug":"三、json格式消息转换器","link":"#三、json格式消息转换器","children":[{"level":3,"title":"1、引入依赖","slug":"_1、引入依赖","link":"#_1、引入依赖","children":[]},{"level":3,"title":"2、配置","slug":"_2、配置","link":"#_2、配置","children":[]}]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":3.33,"words":999},"filePathRelative":"Use/Java/RabbitMQ/RabbitMQ.md","localizedDate":"2024年2月19日"}');export{k as comp,D as data};
