import{_ as p}from"./image-20230406231332293-0HoTda9s.js";import{_ as o,r,o as d,c,e as s,g as n,w as l,f as a,a as D}from"./app-Vg0IViah.js";const k="/notes-pages/assets/image-20230415204336683-DXI9UmOs.png",t={},C=s("h1",{id:"leetcode-题解",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#leetcode-题解"},[s("span",null,"LeetCode 题解")])],-1),h=s("p",null,"持续更新",-1),y={class:"table-of-contents"},v=s("h2",{id:"双指针",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#双指针"},[s("span",null,"双指针")])],-1),u=s("p",null,"双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务",-1),m=s("h3",{id:"_88、合并两个有序数组",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_88、合并两个有序数组"},[s("span",null,"88、合并两个有序数组")])],-1),E={href:"https://leetcode.cn/problems/merge-sorted-array/",target:"_blank",rel:"noopener noreferrer"},b=D(`<p>题目描述：给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span></span>
<span class="line"><span>输出：[1,2,2,3,5,6]</span></span>
<span class="line"><span>解释：需要合并 [1,2,3] 和 [2,5,6] 。</span></span>
<span class="line"><span>合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非递减顺序那就说明是递增的，只需从尾部开始遍历，谁大就存谁</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>因为是递增的，所以最大的肯定在后面</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> merge</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] nums1, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> m, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] nums2, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> n) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> mergeIndex</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = m + n - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> n1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = m - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> n2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = n - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (n2 &gt;= </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (n1 &lt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                nums1[mergeIndex] = nums2[n2];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                mergeIndex--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                n2--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (nums1[n1] &lt; nums2[n2]) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                nums1[mergeIndex] = nums2[n2];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                mergeIndex--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                n2--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                nums1[mergeIndex] = nums1[n1];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                mergeIndex--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                n1--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_141、环形链表" tabindex="-1"><a class="header-anchor" href="#_141、环形链表"><span>141、环形链表</span></a></h3>`,7),g={href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},A=D('<p>题目描述：给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：head = [3,2,0,-4], pos = 1</span></span>
<span class="line"><span>输出：true</span></span>
<span class="line"><span>解释：链表中有一个环，其尾部连接到第二个节点。</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用双指针，一个指针每次移动一个节点，一个指针每次移动两个节点，如果存在环，那么这两个指针一定会相遇。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> hasCycle</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">ListNode</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> head) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (head == </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        ListNode</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> l1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = head, l2 = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">head</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">next</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l1 != </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> &amp;&amp; l2 != </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">l2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">next</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> != </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l1 == l2) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            l1 = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">l1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">next</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            l2 = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">l2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">next</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">next</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_167、两数之和ii" tabindex="-1"><a class="header-anchor" href="#_167、两数之和ii"><span>167、两数之和Ⅱ</span></a></h3>`,6),B={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"},_=D(`<p>题目描述：在有序数组中找出两个数，使它们的和为 target。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">Input: numbers={2, 7, 11, 15}, target=9</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">Output: index1=1, index2=2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用双指针，一个指针指向值较小的元素，一个指针指向值较大的元素。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</p><ul><li>如果两个指针指向元素的和 <code>sum == target</code>，那么得到要求的结果；</li><li>如果 <code>sum &gt; target</code>，移动较大的元素，使 sum 变小一些；</li><li>如果 <code>sum &lt; target</code>，移动较小的元素，使 sum 变大一些。</li></ul><p>数组中的元素最多遍历一次，时间复杂度为 O(N)。只使用了两个额外变量，空间复杂度为 O(1)。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">twoSum</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] numbers, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> target) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (numbers == </span><span style="color:#569CD6;--shiki-dark:#569CD6;">null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#C586C0;--shiki-dark:#C586C0;">return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">    int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, j = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">numbers</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (i &lt; j) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> sum</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = numbers[i] + numbers[j];</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (sum == target) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[]{i + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, j + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">};</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (sum &lt; target) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            i++;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            j--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">    return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> null</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_345、反转字符串中的元音字母" tabindex="-1"><a class="header-anchor" href="#_345、反转字符串中的元音字母"><span>345、反转字符串中的元音字母</span></a></h3>`,7),f={href:"https://leetcode.cn/problems/reverse-vowels-of-a-string/",target:"_blank",rel:"noopener noreferrer"},F=D('<p>题目描述：给你一个字符串 s ，仅反转字符串中的所有元音字母，并返回结果字符串。</p><p>元音字母包括 &#39;a&#39;、&#39;e&#39;、&#39;i&#39;、&#39;o&#39;、&#39;u&#39;，且可能以大小写两种形式出现不止一次。</p><figure><img src="'+k+`" alt="image-20230415204336683" tabindex="0" loading="lazy"><figcaption>image-20230415204336683</figcaption></figure><p>使用双指针，一个指针从头向尾遍历，一个指针从尾到头遍历，当两个指针都遍历到元音字符时，交换这两个元音字符。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里用的是 switch 判断是否是元音字母（好久没用 switch 了，看看还会写不哈哈哈~）</p><p>也可以使用 HashSet、String ... 很多种方法</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> reverseVowels</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        char</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">arr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">toCharArray</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> left</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> right</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">arr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (left &lt; right) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">isAEIOU</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(arr[left])) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">isAEIOU</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(arr[right])) {</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">                    change</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(arr,left,right);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    left++;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    right--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    right--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                left++;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(arr);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">	// 交换</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> change</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">char</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] arr, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> left, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> right) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        char</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> temp</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = arr[left];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        arr[left] = arr[right];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        arr[right] = temp;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">	// 判断是否是元音字母</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> isAEIOU</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">char</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> c) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        boolean</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> flag</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        switch</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (c) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;a&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;e&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;i&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;o&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;u&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;A&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;E&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;I&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;O&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            case</span><span style="color:#CE9178;--shiki-dark:#CE9178;"> &#39;U&#39;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag = </span><span style="color:#569CD6;--shiki-dark:#569CD6;">true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span><span style="color:#C586C0;--shiki-dark:#C586C0;">break</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> flag;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_524、通过删除字母匹配到字典里最长单词" tabindex="-1"><a class="header-anchor" href="#_524、通过删除字母匹配到字典里最长单词"><span>524、通过删除字母匹配到字典里最长单词</span></a></h3>`,7),x={href:"https://leetcode.cn/problems/longest-word-in-dictionary-through-deleting/",target:"_blank",rel:"noopener noreferrer"},q=D(`<p>题目描述：给你一个字符串 s 和一个字符串数组 dictionary ，找出并返回 dictionary 中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。</p><p>如果答案不止一个，返回长度最长且字母序最小的字符串。如果答案不存在，则返回空字符串。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：s = &quot;abpcplea&quot;, dictionary = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</span></span>
<span class="line"><span>输出：&quot;apple&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入：s = &quot;abpcplea&quot;, dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span>
<span class="line"><span>输出：&quot;a&quot;</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 longStr 记录最长子串，得到数组中的每一个字符串 target，跟 s 进行比较，如果 target 包含于 s，则是 s 的子串，与 longStr 进行比较</p><ul><li>longStr 的长度 == target 的长度 <ul><li>判断谁的字典序小就保留谁</li></ul></li><li>longStr 的长度 <code>&lt;</code> target 的长度，则更新 longStr = target</li><li>longStr 的长度 <code>&gt;</code> target 的长度，保持不变</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> String</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findLongestWord</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">List</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">&lt;String&gt; dictionary) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> longStr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#CE9178;--shiki-dark:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> target</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> :</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> dictionary) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">longStr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() &gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">target</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                continue</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">isSunStr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s, target)) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">longStr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() == </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">target</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">                    // 看谁的字典序小</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                    if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">longStr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">compareTo</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(target) &gt; </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                        longStr = target;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                    longStr = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">longStr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() &gt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">target</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() </span><span style="color:#C586C0;--shiki-dark:#C586C0;">?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> longStr </span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">target;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> longStr;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">	// 判断是否是子串</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> isSunStr</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> target) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, j = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (i &lt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() &amp;&amp; j &lt; </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">target</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">charAt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(i) == </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">target</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">charAt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(j)) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                j++;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            i++;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> j == </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">target</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_633、平方数之和" tabindex="-1"><a class="header-anchor" href="#_633、平方数之和"><span>633、平方数之和</span></a></h3>`,7),j={href:"https://leetcode.cn/problems/sum-of-square-numbers/",target:"_blank",rel:"noopener noreferrer"},S=D(`<p>题目描述：给定一个非负整数 <code>c</code> ，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得 <code>a2 + b2 = c</code> 。</p><p>跟167题两数之和几乎一样，范围可以看作 0 ~ c ，可以进步以缩小范围 0 ~ sqrt(c)（sqrt 求平方根）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> judgeSquareSum</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> c) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        long</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> i</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        long</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> j</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">long</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">Math</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">sqrt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(c);</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (i &lt;= j){</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            long</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> sum</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = i*i + j*j;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (sum == c) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (sum &gt; c){</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                j--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                i++;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_680、验证回文串ii" tabindex="-1"><a class="header-anchor" href="#_680、验证回文串ii"><span>680、验证回文串Ⅱ</span></a></h3>`,4),w={href:"https://leetcode.cn/problems/valid-palindrome-ii/",target:"_blank",rel:"noopener noreferrer"},L=D(`<p>题目描述：给你一个字符串 <code>s</code>，<strong>最多</strong> 可以从中删除一个字符。</p><p>请你判断 <code>s</code> 是否能成为回文字符串：如果能，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：s = &quot;aba&quot;</span></span>
<span class="line"><span>输出：true</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：s = &quot;abca&quot;</span></span>
<span class="line"><span>输出：true</span></span>
<span class="line"><span>解释：你可以删除字符 &#39;c&#39; 。</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本题的关键是处理删除一个字符。在使用双指针遍历字符串时，如果出现两个指针指向的字符不相等的情况，我们就试着删除一个字符，再判断删除完之后的字符串是否是回文字符串。</p><p>在试着删除字符时，我们既可以删除左指针指向的字符，也可以删除右指针指向的字符。有一个满足即可。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>删除左边就相当于跳过左边一个元素，即 left++</p><p>删除右边就相当于跳过右边一个元素，即 right--</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> validPalindrome</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        for</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> left</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, right = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">() - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; left &lt; right; left++, right--) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">charAt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(left) != </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">charAt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(right)) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                return</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> delOneChar</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s, left, right-</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) || </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">delOneChar</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(s, left+</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, right);</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> boolean</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> delOneChar</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> s, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> left, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> right) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (left &lt; right) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">charAt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(left) != </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">s</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">charAt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(right)) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> false</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            left++;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            right--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> true</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找"><span>二分查找</span></a></h2><p>计算中值 m 的方式</p><ul><li>m = (l + h) / 2（可能出现加法溢出）</li><li>m = l + (h - l) / 2</li></ul><p>循环退出时如果仍然没有查找到 key，那么表示查找失败。可以有两种返回值</p><ul><li>-1：以一个错误码表示没有查找到 key</li><li>l：将 key 插入到 nums 中的正确位置</li></ul><h3 id="_34、在排序数字中查找元素的第一个和最后一个位置" tabindex="-1"><a class="header-anchor" href="#_34、在排序数字中查找元素的第一个和最后一个位置"><span>34、在排序数字中查找元素的第一个和最后一个位置</span></a></h3>`,14),I={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"},O=D(`<p>题目描述：给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：nums = [5,7,7,8,8,10], target = 8</span></span>
<span class="line"><span>输出：[3,4]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入：nums = [5,7,7,8,8,10], target = 6</span></span>
<span class="line"><span>输出：[-1,-1]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入：nums = [], target = 0</span></span>
<span class="line"><span>输出：[-1,-1]</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为他是有序的<strong>整数</strong>数组，所以我们只需要通过二分查找分别找到 target 的位置，再找到 target + 0.5 的位置 -1 即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">searchRange</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] nums, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> target) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> first</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findTarget</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(nums, target);</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> last</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">findTarget</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(nums, target + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0.5</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (first == </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">nums</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> || nums[first] != target) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[]{-</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, -</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">};</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> new</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[]{first,last};</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findTarget</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] nums, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">double</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> target) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> l</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, h = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">nums</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">; </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// 注意 h 的初始值</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l &lt; h) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> m</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = l + (h - l) / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (nums[m] &gt;= target) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                h = m;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                l = m + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> l;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">nums = [</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">,</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">], target = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 h 的取值为 <code>nums.length - 1</code>，那么 <code>last = findFirst(nums, target + 1) - 1</code> = 1 - 1 = 0。这是因为 <code>findLeft</code> 只会返回 <code>[0, nums.length - 1]</code> 范围的值，对于 <code>findFirst([2,2], 3)</code> ，我们希望返回 3 插入 <code>nums</code> 中的位置，也就是数组最后一个位置再往后一个位置，即 <code>nums.length</code>。所以我们需要将 h 取值为 <code>nums.length</code>，从而使得 <code>findFirst</code>返回的区间更大，能够覆盖 <code>target</code> 大于 <code>nums</code> 最后一个元素的情况。</p></div><h3 id="_69、x-的平方根" tabindex="-1"><a class="header-anchor" href="#_69、x-的平方根"><span>69、x 的平方根</span></a></h3>`,8),V={href:"https://leetcode.cn/problems/sqrtx/",target:"_blank",rel:"noopener noreferrer"},N=D(`<p>题目描述：给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的 <strong>算术平方根</strong> 。</p><p>由于返回类型是整数，结果只保留 <strong>整数部分</strong> ，小数部分将被 <strong>舍去 。</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：x = 4</span></span>
<span class="line"><span>输出：2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入：x = 8</span></span>
<span class="line"><span>输出：2</span></span>
<span class="line"><span>解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个数 x 的开方 sqrt 一定在 0 ~ x 之间，并且一个数的平方根满足 sqrt == x / sqrt。不满足就说明不是他的平方根</p><p>如果一个数的平方根是小数，那么直接舍弃小数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> mySqrt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> x) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (x &lt;= </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> x;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> l</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> h</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = x;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l &lt;= h) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> mid</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = l + (h - l) / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> sqrt</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = x / mid;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (sqrt == mid) {</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">                return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> mid;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (mid &gt; sqrt) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                h = mid - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                l = mid + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> h;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果题目要求小数向上取整，如：输入8 输出3，那么返回 l 即可</p></div><h3 id="_153、寻找旋转排序数组中的最小值" tabindex="-1"><a class="header-anchor" href="#_153、寻找旋转排序数组中的最小值"><span>153、寻找旋转排序数组中的最小值</span></a></h3>`,8),T={href:"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"},z=D(`<p>题目描述：已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：</p><ul><li>若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]</li><li>若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]</li></ul><p>注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。</p><p>给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p><p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：nums = [3,4,5,1,2]</span></span>
<span class="line"><span>输出：1</span></span>
<span class="line"><span>解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入：nums = [4,5,6,7,0,1,2]</span></span>
<span class="line"><span>输出：0</span></span>
<span class="line"><span>解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入：nums = [11,13,15,17]</span></span>
<span class="line"><span>输出：11</span></span>
<span class="line"><span>解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大数的后面会有小数，小数的后面会有大数，直接按照递增序列来做就可以了</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> findMin</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> l</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, h = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">nums</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l &lt; h) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> m</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = l + (h - l) / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (nums[m] &lt;= nums[h]) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                h = m;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                l = m + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 返回 h 或 l 均可</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> nums[h];</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // return nums[l];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_278、第一个错误的版本" tabindex="-1"><a class="header-anchor" href="#_278、第一个错误的版本"><span>278、第一个错误的版本</span></a></h3>`,9),U={href:"https://leetcode.cn/problems/first-bad-version/description/",target:"_blank",rel:"noopener noreferrer"},J=D(`<p>题目描述：你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 <code>bool isBadVersion(version)</code> 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入：n = 5, bad = 4</span></span>
<span class="line"><span>输出：4</span></span>
<span class="line"><span>解释：</span></span>
<span class="line"><span>调用 isBadVersion(3) -&gt; false </span></span>
<span class="line"><span>调用 isBadVersion(5) -&gt; true </span></span>
<span class="line"><span>调用 isBadVersion(4) -&gt; true</span></span>
<span class="line"><span>所以，4 是第一个错误的版本。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入：n = 1, bad = 1</span></span>
<span class="line"><span>输出：1</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>isBadVersion(m)</code> 返回 true 说明第一个错误版本位于 [l，m]，此时令 h = m;</p><p>如果 <code>isBadVersion(m)</code> 返回 false 说明第一个错误版本位于 [m+1，h]，此时令 l = m + 1;</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">    public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> firstBadVersion</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> n) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> l</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, h = n;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l &lt; h) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> m</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = l + (h - l) / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">isBadVersion</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(m)) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                h = m;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                l = m + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 返回 l 或 h 均可</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> l;</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // return h;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_540、有序数列中的单一元素" tabindex="-1"><a class="header-anchor" href="#_540、有序数列中的单一元素"><span>540、有序数列中的单一元素</span></a></h3>`,8),P={href:"https://leetcode.cn/problems/single-element-in-a-sorted-array/",target:"_blank",rel:"noopener noreferrer"},M=D(`<p>题目描述：给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。</p><p>请你找出并返回只出现一次的那个数。</p><p>你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入: nums = [1,1,2,3,3,4,4,8,8]</span></span>
<span class="line"><span>输出: 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入: nums =  [3,3,7,7,10,11,11]</span></span>
<span class="line"><span>输出: 10</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 index 为单一元素在数组中的下标，那么 index 后面的对称序列从 <strong>偶数奇数对称</strong> 变为 <strong>奇数偶数对称</strong>（因为数组下标是从0开始的）</p><p>那么此时，当 m 为偶数时</p><ul><li>若 nums[m] == nums[m+1] 说明 index 在 [m+2，h] 区间，此时让 l = m+2;</li><li>若 nums[m] != nums[m+1] 说明 index 在 [l，m] 区间，此时让 h = m;</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">	public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> int</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> singleNonDuplicate</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">int</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> l</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">, h = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">nums</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l &lt; h) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> m</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = l + (h - l) / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (m % </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> == </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                m--;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (nums[m] == nums[m+</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                l = m + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                h = m;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // 返回 h 或 l 均可</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> nums[h];</span></span>
<span class="line"><span style="color:#6A9955;--shiki-dark:#6A9955;">        // return nums[l];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_744、寻找比目标字母大的最小字母" tabindex="-1"><a class="header-anchor" href="#_744、寻找比目标字母大的最小字母"><span>744、寻找比目标字母大的最小字母</span></a></h3>`,9),R={href:"https://leetcode.cn/problems/find-smallest-letter-greater-than-target/",target:"_blank",rel:"noopener noreferrer"},G=D(`<p>题目描述：给你一个字符数组 letters，该数组按非递减顺序排序，以及一个字符 target。letters 里至少有两个不同的字符。</p><p>返回 letters 中大于 target 的最小的字符。如果不存在这样的字符，则返回 letters 的第一个字符。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span>输入: letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]，target = &quot;a&quot;</span></span>
<span class="line"><span>输出: &quot;c&quot;</span></span>
<span class="line"><span>解释：letters 中字典上比 &#39;a&#39; 大的最小字符是 &#39;c&#39;。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入: letters = [&quot;c&quot;,&quot;f&quot;,&quot;j&quot;], target = &quot;c&quot;</span></span>
<span class="line"><span>输出: &quot;f&quot;</span></span>
<span class="line"><span>解释：letters 中字典顺序上大于 &#39;c&#39; 的最小字符是 &#39;f&#39;。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入: letters = [&quot;x&quot;,&quot;x&quot;,&quot;y&quot;,&quot;y&quot;], target = &quot;z&quot;</span></span>
<span class="line"><span>输出: &quot;x&quot;</span></span>
<span class="line"><span>解释：letters 中没有一个字符在字典上大于 &#39;z&#39;，所以我们返回 letters[0]。</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">   public</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> char</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> nextGreatestLetter</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">char</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] letters, </span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">char</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> target) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> l</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">        int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> h</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">letters</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        while</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (l &lt;= h) {</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            int</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> mid</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = l + (h - l) / </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">2</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">            char</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> c</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = letters[mid];</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">            if</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> (c &lt;= target) {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                l = mid + </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            } </span><span style="color:#C586C0;--shiki-dark:#C586C0;">else</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">                h = mid - </span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">1</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#C586C0;--shiki-dark:#C586C0;">        return</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> l &gt;= </span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">letters</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">length</span><span style="color:#C586C0;--shiki-dark:#C586C0;"> ?</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> letters[</span><span style="color:#B5CEA8;--shiki-dark:#B5CEA8;">0</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">] </span><span style="color:#C586C0;--shiki-dark:#C586C0;">:</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> letters[l];</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function H(W,X){const i=r("router-link"),e=r("ExternalLinkIcon");return d(),c("div",null,[C,h,s("nav",y,[s("ul",null,[s("li",null,[n(i,{to:"#双指针"},{default:l(()=>[a("双指针")]),_:1}),s("ul",null,[s("li",null,[n(i,{to:"#_88、合并两个有序数组"},{default:l(()=>[a("88、合并两个有序数组")]),_:1})]),s("li",null,[n(i,{to:"#_141、环形链表"},{default:l(()=>[a("141、环形链表")]),_:1})]),s("li",null,[n(i,{to:"#_167、两数之和ii"},{default:l(()=>[a("167、两数之和Ⅱ")]),_:1})]),s("li",null,[n(i,{to:"#_345、反转字符串中的元音字母"},{default:l(()=>[a("345、反转字符串中的元音字母")]),_:1})]),s("li",null,[n(i,{to:"#_524、通过删除字母匹配到字典里最长单词"},{default:l(()=>[a("524、通过删除字母匹配到字典里最长单词")]),_:1})]),s("li",null,[n(i,{to:"#_633、平方数之和"},{default:l(()=>[a("633、平方数之和")]),_:1})]),s("li",null,[n(i,{to:"#_680、验证回文串ii"},{default:l(()=>[a("680、验证回文串Ⅱ")]),_:1})])])]),s("li",null,[n(i,{to:"#二分查找"},{default:l(()=>[a("二分查找")]),_:1}),s("ul",null,[s("li",null,[n(i,{to:"#_34、在排序数字中查找元素的第一个和最后一个位置"},{default:l(()=>[a("34、在排序数字中查找元素的第一个和最后一个位置")]),_:1})]),s("li",null,[n(i,{to:"#_69、x-的平方根"},{default:l(()=>[a("69、x 的平方根")]),_:1})]),s("li",null,[n(i,{to:"#_153、寻找旋转排序数组中的最小值"},{default:l(()=>[a("153、寻找旋转排序数组中的最小值")]),_:1})]),s("li",null,[n(i,{to:"#_278、第一个错误的版本"},{default:l(()=>[a("278、第一个错误的版本")]),_:1})]),s("li",null,[n(i,{to:"#_540、有序数列中的单一元素"},{default:l(()=>[a("540、有序数列中的单一元素")]),_:1})]),s("li",null,[n(i,{to:"#_744、寻找比目标字母大的最小字母"},{default:l(()=>[a("744、寻找比目标字母大的最小字母")]),_:1})])])])])]),v,u,m,s("p",null,[a("原题链接："),s("a",E,[a("LeetCode"),n(e)])]),b,s("p",null,[a("原题链接："),s("a",g,[a("LeetCode"),n(e)])]),A,s("p",null,[a("原题链接："),s("a",B,[a("LeetCode"),n(e)])]),_,s("p",null,[a("原题链接："),s("a",f,[a("LeetCode"),n(e)])]),F,s("p",null,[a("原题链接："),s("a",x,[a("LeetCode"),n(e)])]),q,s("p",null,[a("原题链接："),s("a",j,[a("LeetCode"),n(e)])]),S,s("p",null,[a("原题链接："),s("a",w,[a("LeetCode"),n(e)])]),L,s("p",null,[a("原题链接："),s("a",I,[a("LeetCode"),n(e)])]),O,s("p",null,[a("原题链接："),s("a",V,[a("LeetCode"),n(e)])]),N,s("p",null,[a("原题链接："),s("a",T,[a("LeetCode"),n(e)])]),z,s("p",null,[a("原题链接："),s("a",U,[a("LeetCode"),n(e)])]),J,s("p",null,[a("原题链接："),s("a",P,[a("LeetCode"),n(e)])]),M,s("p",null,[a("原题链接："),s("a",R,[a("LeetCode"),n(e)])]),G])}const Y=o(t,[["render",H],["__file","LeetCodeAnswer.html.vue"]]),Z=JSON.parse('{"path":"/Use/Java/Algorithm/LeetCodeAnswer.html","title":"LeetCode 题解","lang":"zh-CN","frontmatter":{"category":"使用篇"},"headers":[{"level":2,"title":"双指针","slug":"双指针","link":"#双指针","children":[{"level":3,"title":"88、合并两个有序数组","slug":"_88、合并两个有序数组","link":"#_88、合并两个有序数组","children":[]},{"level":3,"title":"141、环形链表","slug":"_141、环形链表","link":"#_141、环形链表","children":[]},{"level":3,"title":"167、两数之和Ⅱ","slug":"_167、两数之和ii","link":"#_167、两数之和ii","children":[]},{"level":3,"title":"345、反转字符串中的元音字母","slug":"_345、反转字符串中的元音字母","link":"#_345、反转字符串中的元音字母","children":[]},{"level":3,"title":"524、通过删除字母匹配到字典里最长单词","slug":"_524、通过删除字母匹配到字典里最长单词","link":"#_524、通过删除字母匹配到字典里最长单词","children":[]},{"level":3,"title":"633、平方数之和","slug":"_633、平方数之和","link":"#_633、平方数之和","children":[]},{"level":3,"title":"680、验证回文串Ⅱ","slug":"_680、验证回文串ii","link":"#_680、验证回文串ii","children":[]}]},{"level":2,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[{"level":3,"title":"34、在排序数字中查找元素的第一个和最后一个位置","slug":"_34、在排序数字中查找元素的第一个和最后一个位置","link":"#_34、在排序数字中查找元素的第一个和最后一个位置","children":[]},{"level":3,"title":"69、x 的平方根","slug":"_69、x-的平方根","link":"#_69、x-的平方根","children":[]},{"level":3,"title":"153、寻找旋转排序数组中的最小值","slug":"_153、寻找旋转排序数组中的最小值","link":"#_153、寻找旋转排序数组中的最小值","children":[]},{"level":3,"title":"278、第一个错误的版本","slug":"_278、第一个错误的版本","link":"#_278、第一个错误的版本","children":[]},{"level":3,"title":"540、有序数列中的单一元素","slug":"_540、有序数列中的单一元素","link":"#_540、有序数列中的单一元素","children":[]},{"level":3,"title":"744、寻找比目标字母大的最小字母","slug":"_744、寻找比目标字母大的最小字母","link":"#_744、寻找比目标字母大的最小字母","children":[]}]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":12.69,"words":3806},"filePathRelative":"Use/Java/Algorithm/LeetCodeAnswer.md","localizedDate":"2024年2月19日"}');export{Y as comp,Z as data};
