import{_ as s,o as a,c as n,a as i}from"./app-Vg0IViah.js";const l={},e=i(`<h1 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h1><p>同一个行为具有多个不同表现形式或形态的能力</p><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确 定，是在程序运行期间才确定</p><p>即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定</p><p>前提：</p><ul><li>有继承 / 实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><p>好处和弊端：</p><ul><li>提高了程序的扩展性</li><li>对象多态 : 将方法的形参定义为父类类型, 这个方法可以接收该父类的任意子类对象</li><li>行为多态 : 同一个行为, 具有多个不同表现形式或形态的能力</li><li>不能使用子类的特有成员</li><li>被转的引用类型变量，对应的实际类型和目标类型不是同一种类型，那么在转换的时候就会出现<code>ClassCastException</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> main</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">String</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">[] args) {</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">    useAnimal</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">    useAnimal</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Cat</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> static</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> void</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> useAnimal</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">(</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Animal</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> a) { </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// Animal a = new Dog();</span></span>
<span class="line"><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;">    a</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">.</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;">eat</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();                             </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// Animal a = new Cat();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一、成员访问特点" tabindex="-1"><a class="header-anchor" href="#一、成员访问特点"><span>一、成员访问特点</span></a></h2><ul><li>成员变量：编译看左边（父类），执行看左边（父类）</li><li>成员方法：编译看左边（父类），执行看右边（子类）</li></ul><h2 id="二、多态中的转型" tabindex="-1"><a class="header-anchor" href="#二、多态中的转型"><span>二、多态中的转型</span></a></h2><p>向上转型：从子到父（父类引用指向子类对象）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Fu</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> f</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> Zi</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向下转型：从父到子（将父类引用所指向的对象, 转交给子类类型）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">Zi</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> z</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = (Zi) f;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果被转的引用类型变量，对应的实际类型和目标类型不是同一种类型，那么在转换的时候就会出现<code>ClassCastException</code></p><p>为了避免此问题，可以在转换之前使用 <code>instanceof</code> 判断一下</p></div><h2 id="三、instanceof" tabindex="-1"><a class="header-anchor" href="#三、instanceof"><span>三、instanceof</span></a></h2><p>使用格式：<strong>对象名 instanceof 类型</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes dark-plus dark-plus" style="background-color:#1E1E1E;--shiki-dark-bg:#1E1E1E;color:#D4D4D4;--shiki-dark:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> A</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> B</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> extends</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> A</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;--shiki-dark:#569CD6;">public</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> class</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> C</span><span style="color:#569CD6;--shiki-dark:#569CD6;"> extends</span><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;"> A</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">B</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> b</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> B</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#4EC9B0;--shiki-dark:#4EC9B0;">C</span><span style="color:#9CDCFE;--shiki-dark:#9CDCFE;"> c</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;"> = </span><span style="color:#C586C0;--shiki-dark:#C586C0;">new</span><span style="color:#DCDCAA;--shiki-dark:#DCDCAA;"> C</span><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">b instance A </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// true</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">b instance C </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// false</span></span>
<span class="line"><span style="color:#D4D4D4;--shiki-dark:#D4D4D4;">c instance A </span><span style="color:#6A9955;--shiki-dark:#6A9955;">// true    </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断一个对象是否是一个类的实例</p><p>通俗的理解：判断关键字左边的对象，是否是右边的类型，返回<code>boolean</code>类型结果</p>`,22),r=[e];function p(D,o){return a(),n("div",null,r)}const c=s(l,[["render",p],["__file","Polymorphism.html.vue"]]),k=JSON.parse('{"path":"/Grammar/Java/Java/Polymorphism.html","title":"多态","lang":"zh-CN","frontmatter":{"category":"语法"},"headers":[{"level":2,"title":"一、成员访问特点","slug":"一、成员访问特点","link":"#一、成员访问特点","children":[]},{"level":2,"title":"二、多态中的转型","slug":"二、多态中的转型","link":"#二、多态中的转型","children":[]},{"level":2,"title":"三、instanceof","slug":"三、instanceof","link":"#三、instanceof","children":[]}],"git":{"createdTime":1708330205000,"updatedTime":1708873062000,"contributors":[{"name":"zhanglinwei","email":"3498729975@qq.com","commits":2}]},"readingTime":{"minutes":1.96,"words":588},"filePathRelative":"Grammar/Java/Java/Polymorphism.md","localizedDate":"2024年2月19日"}');export{c as comp,k as data};
